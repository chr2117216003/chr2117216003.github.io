<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huangrong Chen</title>
  
  <subtitle>--自律才能自由</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-05T07:29:47.365Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Huangrong Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AC自动机</title>
    <link href="http://yoursite.com/2019/08/15/2019-08-15-python-ac-automatic/"/>
    <id>http://yoursite.com/2019/08/15/2019-08-15-python-ac-automatic/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.365Z</updated>
    
    <content type="html"><![CDATA[<p>AC自动机的python实现。AC自动机是结合Trie树和KMP的多模式匹配的实现。相对于KMP只能处理单个单词的查找，AC自动机通过构建Trie树和其fail指针的方式来对当前匹配失败的字符进行下一步的匹配，减少了时间复杂度，加快程序运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fail=<span class="literal">None</span></span><br><span class="line">        self.isword=<span class="literal">False</span></span><br><span class="line">        self.<span class="built_in">next</span>=&#123;&#125;</span><br><span class="line">        self.word=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ac_automatic</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.root = node()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, word</span>):</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">in</span> p.<span class="built_in">next</span>:</span><br><span class="line">                p = p.<span class="built_in">next</span>[w]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p.<span class="built_in">next</span>[w] = node()</span><br><span class="line">                p = p.<span class="built_in">next</span>[w]</span><br><span class="line">        p.isword=<span class="literal">True</span></span><br><span class="line">        p.word=word</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span>(<span class="params">self</span>):</span></span><br><span class="line">        p = self.root</span><br><span class="line">        temp = [p]</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(temp) != <span class="number">0</span>:</span><br><span class="line">            d = temp.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> d.<span class="built_in">next</span>.keys():</span><br><span class="line">                p = d</span><br><span class="line">                <span class="keyword">if</span> p == self.root:</span><br><span class="line">                    v.fail = self.root</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> p.fail != <span class="literal">None</span> <span class="keyword">and</span> v <span class="keyword">not</span> <span class="keyword">in</span> p.fail.<span class="built_in">next</span>:</span><br><span class="line">                        p = p.fail</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> v <span class="keyword">in</span> p.fail.<span class="built_in">next</span>:</span><br><span class="line">                        v.fail = p.fail.<span class="built_in">next</span>[v]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        v.fail = self.root</span><br><span class="line">            temp.append(v)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, content</span>):</span></span><br><span class="line">        p = self.root</span><br><span class="line">        final = []</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> content:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> p.fail != <span class="literal">None</span> <span class="keyword">and</span> w <span class="keyword">not</span> <span class="keyword">in</span> p.fail.<span class="built_in">next</span>:</span><br><span class="line">                p = p.fail</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">in</span> p.<span class="built_in">next</span>:</span><br><span class="line">                p = p.<span class="built_in">next</span>[w]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = self.root</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> p.isword == <span class="literal">True</span>:</span><br><span class="line">                final.append(p.word)</span><br><span class="line">        <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line">model = ac_automatic()</span><br><span class="line">model.add(<span class="string">&quot;her&quot;</span>)</span><br><span class="line">model.add(<span class="string">&quot;she&quot;</span>)</span><br><span class="line">print(model.search(<span class="string">&quot;dfadooudashefhe2fdl&quot;</span>))</span><br><span class="line">            </span><br><span class="line">                    </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      AC自动机的python实现。AC自动机是结合Trie树和KMP的多模式匹配的实现。相对于KMP只能处理单个单词的查找，AC自动机通过构建Trie树和其fail指针的方式来对当前匹配失败的字符进行下一步的匹配，减少了时间复杂度，加快程序运行。
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>downloading images from particular website</title>
    <link href="http://yoursite.com/2019/05/27/2019-5-27-downloading_images_from_particular_website/"/>
    <id>http://yoursite.com/2019/05/27/2019-5-27-downloading_images_from_particular_website/</id>
    <published>2019-05-26T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.365Z</updated>
    
    <content type="html"><![CDATA[<p>一些特殊的网站，比如漫画网站，并没有对图片做访问登陆的限制，并且图片访问呈现一定的规律性，就可以通过编程简单爬虫的手段下载。在这边我上传了一个我下载哈哈漫画的示例程序，有兴趣的童鞋可以看看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取特殊网站图片方法一</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">&quot;有意思的网址/files/&quot;</span></span><br><span class="line">base_url = <span class="string">&quot;有意思的网址/files/80606/&quot;</span></span><br><span class="line">begin_page = <span class="number">27956</span></span><br><span class="line">end_page = <span class="number">63655</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page_id <span class="keyword">in</span> <span class="built_in">range</span>(begin_page, end_page + <span class="number">1</span>):</span><br><span class="line">    url = base_url + <span class="built_in">str</span>(page_id) + <span class="string">&quot;/&quot;</span></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    response_id = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    dir_path = url.replace(prefix, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_path):</span><br><span class="line">        os.makedirs(dir_path)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> response_id != <span class="literal">False</span>:</span><br><span class="line">        url_path = url + <span class="built_in">str</span>(index) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        response = requests.get(url_path)</span><br><span class="line">        response_id = response.ok</span><br><span class="line">        </span><br><span class="line">        filename = url_path.replace(prefix, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> response_id == <span class="literal">True</span>:</span><br><span class="line">            print(url_path, filename)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(<span class="number">128</span>):</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">        </span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="此外还有一种更加优秀的解决方法"><a href="#此外还有一种更加优秀的解决方法" class="headerlink" title="此外还有一种更加优秀的解决方法"></a>此外还有一种更加优秀的解决方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取特殊网站图片方法二</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">really used in fetching url from 不可描述的网站</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloading_images</span>(<span class="params">prefix, url</span>):</span></span><br><span class="line">    filename = url.replace(prefix, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    basename = os.path.basename(filename)</span><br><span class="line">    dirname = filename.replace(basename, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    dirurl = url.replace(basename, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirname):</span><br><span class="line">        os.makedirs(dirname)</span><br><span class="line">        </span><br><span class="line">    response_id = <span class="literal">True</span></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> response_id != <span class="literal">False</span>:</span><br><span class="line">        url_path = dirurl + <span class="built_in">str</span>(index) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        response = requests.get(url_path)</span><br><span class="line">        response_id = response.ok</span><br><span class="line">        </span><br><span class="line">        filename = dirname + <span class="built_in">str</span>(index) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        <span class="keyword">if</span> response_id == <span class="literal">True</span>:</span><br><span class="line">            print(url_path, filename)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(<span class="number">128</span>):</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">        </span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    prefix = <span class="string">&quot;不可描述的域名&quot;</span></span><br><span class="line">    </span><br><span class="line">    down_loading_urls = [</span><br><span class="line">        [<span class="string">&#x27;不可描述的网站&#x27;</span>, <span class="number">49</span>]</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> down_loading_url, count <span class="keyword">in</span> down_loading_urls:</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">&#x27;-headless&#x27;</span>)</span><br><span class="line">        chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">        browser = webdriver.Chrome(chrome_options = chrome_options)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(down_loading_url)</span><br><span class="line">            browser.get(down_loading_url)</span><br><span class="line">            time.sleep(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, count + <span class="number">1</span>):</span><br><span class="line">                browser.find_element_by_xpath(<span class="string">&#x27;/html/body/div[2]/div[3]/div[2]/ul/li[%d]/a&#x27;</span>%num).click()</span><br><span class="line">                time.sleep(<span class="number">4</span>)</span><br><span class="line">                values = browser.find_elements_by_xpath(<span class="string">&#x27;/html/body/div[2]/article/div/div/img[1]&#x27;</span>)[<span class="number">0</span>].get_attribute(<span class="string">&#x27;data-original&#x27;</span>)</span><br><span class="line">                downloading_images(prefix, values)</span><br><span class="line">                browser.back()</span><br><span class="line">                time.sleep(<span class="number">4</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;global&quot;</span>,e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            browser.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完成之后最好把图片都放一个文件夹，并且放在手机上观看"><a href="#完成之后最好把图片都放一个文件夹，并且放在手机上观看" class="headerlink" title="完成之后最好把图片都放一个文件夹，并且放在手机上观看"></a>完成之后最好把图片都放一个文件夹，并且放在手机上观看</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将图片集中到一个文件夹</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">dirname = <span class="string">&quot;files/80606&quot;</span></span><br><span class="line">dirs = os.listdir(dirname)</span><br><span class="line">dirs = [<span class="built_in">int</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> dirs]</span><br><span class="line">dirs.sort()</span><br><span class="line">new_dirname = dirname + <span class="string">&quot;all&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_dirname):</span><br><span class="line">    os.makedirs(new_dirname)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir_ <span class="keyword">in</span> dirs:</span><br><span class="line">    dir_path = os.path.join(dirname, <span class="built_in">str</span>(dir_))</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(dir_path):</span><br><span class="line">        filename = os.path.join(dir_path, file)</span><br><span class="line">        shutil.copy(filename, os.path.join(new_dirname, <span class="built_in">str</span>(index) + <span class="string">&quot;.jpg&quot;</span>))</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">dirname = <span class="string">&quot;files/80648&quot;</span></span><br><span class="line">new_dirname = dirname + <span class="string">&quot;all&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_dirname):</span><br><span class="line">    os.makedirs(new_dirname)</span><br><span class="line"></span><br><span class="line">dirs = <span class="built_in">sorted</span>([<span class="built_in">int</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> os.listdir(dirname)])</span><br><span class="line"></span><br><span class="line">t_dir = dirs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">t_path = os.path.join(dirname, <span class="built_in">str</span>(t_dir))</span><br><span class="line"></span><br><span class="line">mark = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(t_path):</span><br><span class="line">    t_t_dir = os.path.join(t_path, f)</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(t_t_dir):</span><br><span class="line">        mark = <span class="literal">True</span></span><br><span class="line">        shutil.move(t_t_dir, os.path.join(dirname, f))</span><br><span class="line"><span class="keyword">if</span> mark == <span class="literal">True</span>:</span><br><span class="line">    os.rmdir(t_path)</span><br><span class="line"></span><br><span class="line">dirs = <span class="built_in">sorted</span>([<span class="built_in">int</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> os.listdir(dirname)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir_ <span class="keyword">in</span> dirs:</span><br><span class="line">    path_dir = os.path.join(dirname, <span class="built_in">str</span>(dir_))</span><br><span class="line"><span class="comment">#     print(path_dir)</span></span><br><span class="line"></span><br><span class="line">    dir_ = <span class="built_in">sorted</span>([<span class="built_in">int</span>(value.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]) <span class="keyword">for</span> value <span class="keyword">in</span> os.listdir(path_dir)])</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> dir_:</span><br><span class="line">        filename = os.path.join(path_dir,<span class="built_in">str</span>(file) + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">        new_filename = os.path.join(new_dirname,<span class="built_in">str</span>(index) + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">        print(filename, new_filename)</span><br><span class="line">        shutil.copy(filename,new_filename)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      一些特殊的网站，比如漫画网站，并没有对图片做访问登陆的限制，并且图片访问呈现一定的规律性，就可以通过编程简单爬虫的手段下载。在这边我上传了一个我下载哈哈漫画的示例程序，有兴趣的童鞋可以看看。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>SFTGAN test</title>
    <link href="http://yoursite.com/2019/04/18/2019-4-18-SFTGAN_test/"/>
    <id>http://yoursite.com/2019/04/18/2019-4-18-SFTGAN_test/</id>
    <published>2019-04-17T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.365Z</updated>
    
    <content type="html"><![CDATA[<p>SFTGAN是截至到目前在本研究部门内部研究发现的最好的和最优的超分辨放大算法，当然算法都是针对某一个领域，某一个方向的。SFTGAN发现是在艺术画的放大生成过程中是最好的。而ESRGAN在现实生活图片，真实照片上的放大效果比较突出，尤其是颜色比较集中的情况下。以下内容是SFTGAN的测试用例和为了方便使用改写的测试代码。</p><p>SFTGAN的github地址：<a href="https://github.com/xinntao/SFTGAN">SFTGAN</a></p><p>程序的组织架构如下：<br><img src="/images/SFTGAN.png" alt="SFTGAN.png"></p><p>首先说明执行命令<br><br><br>运行test_subdir.py(即可运行文件，代码如下)将images下的所有图片放大到4096并放置于images_4096下，将大于1024并小于2048的图片先resize到1024再通过SFTGAN来super resolution，而大于2048的图片直接resize到4096。其中的1表示首先拷贝和处理images的图片为三通道然后再放置于images_4096, 而5代表迭代五次，因为本程序只能通过SFTGAN放大四倍，若要从256的图片放大到4096要两次，更小的要更多次数，保险起见设置为5.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test_subdir.py images/ images_4096/ <span class="number">1</span> <span class="number">5</span> <span class="number">2048</span> <span class="number">4096</span> <span class="number">1024</span></span><br></pre></td></tr></table></figure><p>以下代码放置于pytorch_test文件夹下，用于将目录下的文件放大到指定大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Segmentation codes for generating segmentation probability maps for SFTGAN</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.utils</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> architectures <span class="keyword">as</span> arch</span><br><span class="line"><span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 通道转换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_image_channels</span>(<span class="params">input_image_path, output_image_path</span>):</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(input_image_path)</span><br><span class="line">    <span class="keyword">if</span> image.mode == <span class="string">&#x27;RGBA&#x27;</span>:</span><br><span class="line">        r, g, b, a = image.split()</span><br><span class="line">        image = Image.merge(<span class="string">&quot;RGB&quot;</span>, (r, g, b))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.remove(output_image_path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        image.save(output_image_path)</span><br><span class="line">    <span class="keyword">elif</span> image.mode != <span class="string">&#x27;RGB&#x27;</span>:</span><br><span class="line">        image = image.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.remove(output_image_path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        image.save(output_image_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.remove(output_image_path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        image.save(output_image_path)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># options</span></span><br><span class="line">os.environ[<span class="string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">times = <span class="number">3</span></span><br><span class="line">channel_mark = <span class="number">1</span></span><br><span class="line">imgSize = <span class="number">4096</span></span><br><span class="line">finalSize = <span class="number">4096</span></span><br><span class="line">minImgSize = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imagespath = sys.argv[<span class="number">1</span>]   <span class="comment">#must end with &quot;/&quot;</span></span><br><span class="line">outputdir = sys.argv[<span class="number">2</span>]   <span class="comment">#must end with &quot;/&quot;</span></span><br><span class="line">channel_mark = <span class="built_in">int</span>(sys.argv[<span class="number">3</span>]) <span class="comment">#default 1, means change all images to 3 channel</span></span><br><span class="line">times = <span class="built_in">int</span>(sys.argv[<span class="number">4</span>]) <span class="comment">#default 3</span></span><br><span class="line">imgSize = <span class="built_in">int</span>(sys.argv[<span class="number">5</span>])</span><br><span class="line">finalSize = <span class="built_in">int</span>(sys.argv[<span class="number">6</span>])</span><br><span class="line">minImgSize = <span class="built_in">int</span>(sys.argv[<span class="number">7</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(outputdir):</span><br><span class="line">    os.makedirs(outputdir)</span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)  <span class="comment"># if you want to run on CPU, change &#x27;cuda&#x27; -&gt; &#x27;cpu&#x27;</span></span><br><span class="line"><span class="comment"># device = torch.device(&#x27;cpu&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_path = <span class="string">&#x27;/home/t-huch/SFTGAN/pretrained_models/SFTGAN_torch.pth&#x27;</span>  <span class="comment"># torch version</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;torch&#x27;</span> <span class="keyword">in</span> model_path:  <span class="comment"># torch version</span></span><br><span class="line">    model = arch.SFT_Net_torch()</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># pytorch version</span></span><br><span class="line">    model = arch.SFT_Net()</span><br><span class="line">model.load_state_dict(torch.load(model_path), strict=<span class="literal">True</span>)</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line">model = model.to(device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># load model</span></span><br><span class="line">seg_model = arch.OutdoorSceneSeg()</span><br><span class="line">model_path = <span class="string">&#x27;/home/t-huch/SFTGAN/pretrained_models/segmentation_OST_bic.pth&#x27;</span></span><br><span class="line">seg_model.load_state_dict(torch.load(model_path), strict=<span class="literal">True</span>)</span><br><span class="line">seg_model.<span class="built_in">eval</span>()</span><br><span class="line">seg_model = seg_model.to(device)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Testing SFTGAN ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(channel_mark)</span><br><span class="line"><span class="keyword">if</span> channel_mark == <span class="number">1</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(imagespath):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            path = os.path.join(root,file)</span><br><span class="line">            imgname = os.path.basename(path)</span><br><span class="line">            subDir = os.path.join(outputdir,root.replace(imagespath, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(subDir):</span><br><span class="line">                os.makedirs(subDir)</span><br><span class="line">            print(path)</span><br><span class="line">            change_image_channels(path, os.path.join(subDir,imgname))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> times &gt; <span class="number">0</span>:</span><br><span class="line">    times -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(outputdir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            path = os.path.join(root,file)</span><br><span class="line">            imgname = os.path.basename(path)</span><br><span class="line">            <span class="comment"># read image</span></span><br><span class="line">            img = cv2.imread(path, cv2.IMREAD_UNCHANGED)</span><br><span class="line">            print(img.shape, path)</span><br><span class="line">            <span class="keyword">if</span> img.shape[<span class="number">0</span>] &lt;imgSize <span class="keyword">or</span> img.shape[<span class="number">1</span>] &lt;imgSize:</span><br><span class="line">                <span class="keyword">if</span> img.shape[<span class="number">0</span>] &gt; minImgSize <span class="keyword">or</span> img.shape[<span class="number">1</span>] &gt; minImgSize:</span><br><span class="line">                    img = cv2.resize(img, (minImgSize, minImgSize), interpolation=cv2.INTER_CUBIC)</span><br><span class="line">                test_img = util.modcrop(img, <span class="number">8</span>)</span><br><span class="line">                img = util.modcrop(img, <span class="number">8</span>)</span><br><span class="line">                <span class="keyword">if</span> img.ndim == <span class="number">2</span>:</span><br><span class="line">                    img = np.expand_dims(img, axis=<span class="number">2</span>)</span><br><span class="line">                img = torch.from_numpy(np.transpose(img, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))).<span class="built_in">float</span>()</span><br><span class="line"></span><br><span class="line">                img_LR = util.imresize(img / <span class="number">255</span>, <span class="number">1</span>, antialiasing=<span class="literal">True</span>)</span><br><span class="line">                img = util.imresize(img_LR, <span class="number">4</span>, antialiasing=<span class="literal">True</span>) * <span class="number">255</span></span><br><span class="line"></span><br><span class="line">                img[<span class="number">0</span>] -= <span class="number">103.939</span></span><br><span class="line">                img[<span class="number">1</span>] -= <span class="number">116.779</span></span><br><span class="line">                img[<span class="number">2</span>] -= <span class="number">123.68</span></span><br><span class="line">                img = img.unsqueeze(<span class="number">0</span>)</span><br><span class="line">                img = img.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    output = seg_model(img).detach().<span class="built_in">float</span>().cpu().squeeze()</span><br><span class="line"></span><br><span class="line">                test_img = test_img * <span class="number">1.0</span> / <span class="number">255</span></span><br><span class="line">                <span class="keyword">if</span> test_img.ndim == <span class="number">2</span>:</span><br><span class="line">                    test_img = np.expand_dims(test_img, axis=<span class="number">2</span>)</span><br><span class="line">                test_img = torch.from_numpy(np.transpose(test_img[:, :, [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]], (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))).<span class="built_in">float</span>()</span><br><span class="line">                img_LR = util.imresize(test_img, <span class="number">1</span> , antialiasing=<span class="literal">True</span>)</span><br><span class="line">                img_LR = img_LR.unsqueeze(<span class="number">0</span>)</span><br><span class="line">                img_LR = img_LR.to(device)</span><br><span class="line"></span><br><span class="line">                seg = output</span><br><span class="line"></span><br><span class="line">                seg = seg.unsqueeze(<span class="number">0</span>)</span><br><span class="line">                seg = seg.to(device)</span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    output = model((img_LR, seg)).data.<span class="built_in">float</span>().cpu().squeeze()</span><br><span class="line">                output = util.tensor2img(output)</span><br><span class="line">                subDir = os.path.join(outputdir,root.replace(outputdir, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(subDir):</span><br><span class="line">                    os.makedirs(subDir)</span><br><span class="line">                util.save_img(output, os.path.join(subDir,imgname))</span><br><span class="line"></span><br><span class="line">                print(<span class="string">&quot;time consumption : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start_time))</span><br><span class="line">            <span class="keyword">elif</span> img.shape[<span class="number">0</span>] == finalSize <span class="keyword">and</span> img.shape[<span class="number">1</span>] == finalSize:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#                 subDir = os.path.join(outputdir,root.replace(outputdir, &quot;&quot;))</span></span><br><span class="line"><span class="comment">#                 if not os.path.exists(subDir):</span></span><br><span class="line"><span class="comment">#                     os.makedirs(subDir)</span></span><br><span class="line"><span class="comment">#                 cv2.imwrite(os.path.join(subDir,imgname), img)</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                img = cv2.resize(img, (finalSize, finalSize), interpolation=cv2.INTER_CUBIC)</span><br><span class="line">                subDir = os.path.join(outputdir,root.replace(outputdir, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(subDir):</span><br><span class="line">                    os.makedirs(subDir)</span><br><span class="line">                cv2.imwrite(os.path.join(subDir,imgname), img)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      SFTGAN是截至到目前在本研究部门内部研究发现的最好的和最优的超分辨放大算法，当然算法都是针对某一个领域，某一个方向的。SFTGAN发现是在艺术画的放大生成过程中是最好的。而ESRGAN在现实生活图片，真实照片上的放大效果比较突出，尤其是颜色比较集中的情况下。以下内容是SFTGAN的测试用例和为了方便使用改写的测试代码。
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>voting program</title>
    <link href="http://yoursite.com/2018/12/19/2018-12-19-voting-program/"/>
    <id>http://yoursite.com/2018/12/19/2018-12-19-voting-program/</id>
    <published>2018-12-18T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.363Z</updated>
    
    <content type="html"><![CDATA[<p>采用多进程多线程的方式进行特征融合和SVM训练的工作。算法中采用得到的是Sklearn的SVC框架，可以设置gridSearch来控制进程的数量，当然如果多个特征文件的多个组合任务时候。可以用本代码的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%run simple_voting.py -i S4_2RFH.csv,S4_AthMethPre.csv,S4_KNN.csv,S4_PCP.csv -l <span class="number">0</span> -c <span class="number">5</span> -n <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold  </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="comment"># from sklearn.cross_validation import train_test_split</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">import</span> warnings </span><br><span class="line">whole_result=[]</span><br><span class="line">input_files=<span class="string">&quot;&quot;</span></span><br><span class="line">whole_dimension=[]</span><br><span class="line">default_l = <span class="number">1</span></span><br><span class="line">cross_validation_value = <span class="number">10</span></span><br><span class="line">CPU_value = <span class="number">1</span></span><br><span class="line">opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">&quot;hi:l:c:n:&quot;</span>, )</span><br><span class="line">final_out_to_excel=[]</span><br><span class="line">row0 = [<span class="string">u&#x27;特征集&#x27;</span>, <span class="string">u&#x27;样本个数&#x27;</span>, <span class="string">u&#x27;分类器&#x27;</span>, <span class="string">u&#x27;Accuracy&#x27;</span>, <span class="string">u&#x27;Precision&#x27;</span>, <span class="string">u&#x27;Recall&#x27;</span>, <span class="string">u&#x27;SN&#x27;</span>, <span class="string">u&#x27;SP&#x27;</span>,</span><br><span class="line">                <span class="string">u&#x27;Gm&#x27;</span>, <span class="string">u&#x27;F_measure&#x27;</span>, <span class="string">u&#x27;F_score&#x27;</span>, <span class="string">u&#x27;MCC&#x27;</span>, <span class="string">u&#x27;ROC曲线面积&#x27;</span>, <span class="string">u&#x27;tp&#x27;</span>, <span class="string">u&#x27;fn&#x27;</span>, <span class="string">u&#x27;fp&#x27;</span>, <span class="string">u&#x27;tn&#x27;</span>]</span><br><span class="line">final_out_to_excel.append(row0) <span class="comment">#above was used to generate xlsx format Excel file</span></span><br><span class="line"><span class="keyword">for</span> op, value <span class="keyword">in</span> opts:</span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&quot;-i&quot;</span>:</span><br><span class="line">        input_files = <span class="built_in">str</span>(value)</span><br><span class="line">        input_files = input_files.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> input_file <span class="keyword">in</span> input_files:</span><br><span class="line">            <span class="keyword">if</span> input_file == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                print(<span class="string">&quot;Warning: please insure no blank in your input files !&quot;</span>)</span><br><span class="line">                sys.exit()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&quot;-l&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(value) == <span class="number">1</span>:</span><br><span class="line">            default_l = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            default_l = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&quot;-c&quot;</span>:</span><br><span class="line">        cross_validation_value = <span class="built_in">int</span>(value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&quot;-n&quot;</span>:</span><br><span class="line">        CPU_value = <span class="built_in">int</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span>(<span class="params">labelArr, predictArr</span>):</span></span><br><span class="line">    <span class="comment">#labelArr[i] is actual value,predictArr[i] is predict value</span></span><br><span class="line">    TP = <span class="number">0.</span>; TN = <span class="number">0.</span>; FP = <span class="number">0.</span>; FN = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labelArr)):</span><br><span class="line">        <span class="keyword">if</span> labelArr[i] == <span class="number">1</span> <span class="keyword">and</span> predictArr[i] == <span class="number">1</span>:</span><br><span class="line">            TP += <span class="number">1.</span></span><br><span class="line">        <span class="keyword">if</span> labelArr[i] == <span class="number">1</span> <span class="keyword">and</span> predictArr[i] == <span class="number">0</span>:</span><br><span class="line">            FN += <span class="number">1.</span></span><br><span class="line">        <span class="keyword">if</span> labelArr[i] == <span class="number">0</span> <span class="keyword">and</span> predictArr[i] == <span class="number">1</span>:</span><br><span class="line">            FP += <span class="number">1.</span></span><br><span class="line">        <span class="keyword">if</span> labelArr[i] == <span class="number">0</span> <span class="keyword">and</span> predictArr[i] == <span class="number">0</span>:</span><br><span class="line">            TN += <span class="number">1.</span></span><br><span class="line">    <span class="keyword">if</span> (TP + FN)==<span class="number">0</span>:</span><br><span class="line">        SN=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        SN = TP/(TP + FN) <span class="comment">#Sensitivity = TP/P  and P = TP + FN</span></span><br><span class="line">    <span class="keyword">if</span> (FP+TN)==<span class="number">0</span>:</span><br><span class="line">        SP=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        SP = TN/(FP + TN) <span class="comment">#Specificity = TN/N  and N = TN + FP</span></span><br><span class="line">    <span class="keyword">if</span> (TP+FP)==<span class="number">0</span>:</span><br><span class="line">        precision=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        precision=TP/(TP+FP)</span><br><span class="line">    <span class="keyword">if</span> (TP+FN)==<span class="number">0</span>:</span><br><span class="line">        recall=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        recall=TP/(TP+FN)</span><br><span class="line">    GM=math.sqrt(recall*SP)</span><br><span class="line">    <span class="comment">#MCC = (TP*TN-FP*FN)/math.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))</span></span><br><span class="line">    <span class="keyword">return</span> precision,recall,SN,SP,GM,TP,TN,FP,FN</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>(<span class="params">X_train, y_train, cross_validation_value, CPU_value, input_file, share_y_predict_dict, share_y_predict_proba_dict</span>):</span></span><br><span class="line">    print(<span class="string">&quot;子进程执行中&gt;&gt;&gt; pid=&#123;0&#125;,ppid=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid(),os.getppid()))</span><br><span class="line">    svc = svm.SVC(probability=<span class="literal">True</span>)</span><br><span class="line">    parameters = &#123;<span class="string">&#x27;kernel&#x27;</span>: [<span class="string">&#x27;rbf&#x27;</span>], <span class="string">&#x27;C&#x27;</span>:<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="number">2</span>**x,np.linspace(<span class="number">-2</span>,<span class="number">5</span>,<span class="number">7</span>)), <span class="string">&#x27;gamma&#x27;</span>:<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="number">2</span>**x,np.linspace(<span class="number">-5</span>,<span class="number">2</span>,<span class="number">7</span>))&#125;</span><br><span class="line">    clf = GridSearchCV(svc, parameters, cv=cross_validation_value, n_jobs=CPU_value, scoring=<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">    clf.fit(X_train, y_train)</span><br><span class="line">    C=clf.best_params_[<span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">    gamma=clf.best_params_[<span class="string">&#x27;gamma&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;c:&#x27;</span>,C,<span class="string">&#x27;gamma:&#x27;</span>,gamma)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    y_predict=cross_val_predict(svm.SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,C=C,gamma=gamma,),X_train,y_train,cv=cross_validation_value,n_jobs=CPU_value)</span><br><span class="line">    y_predict_prob=cross_val_predict(svm.SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,C=C,gamma=gamma,probability=<span class="literal">True</span>),X_train,y_train,cv=cross_validation_value,n_jobs=CPU_value,method=<span class="string">&#x27;predict_proba&#x27;</span>)</span><br><span class="line">    input_file = input_file.replace(<span class="string">&quot;.csv&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    y_predict_path = input_file + <span class="string">&quot;_predict.csv&quot;</span></span><br><span class="line">    y_predict_proba_path = input_file + <span class="string">&quot;_predict_proba.csv&quot;</span></span><br><span class="line">    share_y_predict_dict[input_file] = y_predict</span><br><span class="line">    share_y_predict_proba_dict[input_file] = y_predict_prob[:,<span class="number">1</span>]</span><br><span class="line">    pd.DataFrame(y_predict).to_csv(y_predict_path, header = <span class="literal">None</span>, index = <span class="literal">False</span>)</span><br><span class="line">    pd.DataFrame(y_predict_prob[:,<span class="number">1</span>]).to_csv(y_predict_proba_path, header = <span class="literal">None</span>, index = <span class="literal">False</span>)</span><br><span class="line">    print(<span class="string">&quot;子进程终止&gt;&gt;&gt; pid=&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;主进程执行中&gt;&gt;&gt; pid=&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    manager = Manager()</span><br><span class="line">    share_y_predict_dict = manager.<span class="built_in">dict</span>()</span><br><span class="line">    share_y_predict_proba_dict = manager.<span class="built_in">dict</span>()</span><br><span class="line">    ps=[]</span><br><span class="line">    <span class="keyword">if</span> default_l == <span class="number">1</span>:</span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        x_len = <span class="number">1000</span></span><br><span class="line">        y_len = <span class="number">1000</span></span><br><span class="line">        file_len = <span class="built_in">len</span>(input_files)</span><br><span class="line">        threshold = file_len/<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> index, input_file <span class="keyword">in</span> <span class="built_in">enumerate</span>(input_files):</span><br><span class="line">            data = pd.read_csv(input_file,header=<span class="literal">None</span>)</span><br><span class="line">            (x_len,y_len) = data.shape</span><br><span class="line"></span><br><span class="line">            X_train = data.iloc[:,<span class="number">0</span>:y_len<span class="number">-1</span>]</span><br><span class="line">            y_train = data.iloc[:,[y_len<span class="number">-1</span>]]</span><br><span class="line">            X_train = X_train.values</span><br><span class="line">            y_train = y_train.values</span><br><span class="line">            y_train = y_train.reshape(<span class="number">-1</span>)</span><br><span class="line">            p=Process(target=worker,name=<span class="string">&quot;worker&quot;</span>+<span class="built_in">str</span>(index),args=(X_train, y_train, cross_validation_value, CPU_value,input_file,share_y_predict_dict,share_y_predict_proba_dict))</span><br><span class="line">            ps.append(p)</span><br><span class="line">        <span class="comment"># 开启进程</span></span><br><span class="line">        <span class="keyword">for</span> index, input_file <span class="keyword">in</span> <span class="built_in">enumerate</span>(input_files):</span><br><span class="line">            ps[index].start()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 阻塞进程</span></span><br><span class="line">        <span class="keyword">for</span> index, input_file <span class="keyword">in</span> <span class="built_in">enumerate</span>(input_files):</span><br><span class="line">            ps[index].join()</span><br><span class="line">        ensembling_prediction = <span class="number">0</span></span><br><span class="line">        ensembling_prediction_proba = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> share_y_predict_dict.items():</span><br><span class="line">            ensembling_prediction = ensembling_prediction + value</span><br><span class="line">        ensembling_prediction = [<span class="number">1</span> <span class="keyword">if</span> e &gt; threshold <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> e <span class="keyword">in</span> ensembling_prediction]</span><br><span class="line">        print(ensembling_prediction)</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> share_y_predict_proba_dict.items():</span><br><span class="line">            ensembling_prediction_proba = ensembling_prediction_proba + value</span><br><span class="line">        ensembling_prediction_proba = ensembling_prediction_proba/<span class="number">3.0</span></span><br><span class="line">        print(ensembling_prediction_proba/<span class="number">3.0</span>)</span><br><span class="line">        ACC=metrics.accuracy_score(y_train,ensembling_prediction)</span><br><span class="line">        print(<span class="string">&quot;ACC&quot;</span>,ACC)</span><br><span class="line">        precision, recall, SN, SP, GM, TP, TN, FP, FN = performance(y_train, ensembling_prediction) </span><br><span class="line">        F1_Score=metrics.f1_score(y_train, ensembling_prediction)</span><br><span class="line">        F_measure=F1_Score</span><br><span class="line">        MCC=metrics.matthews_corrcoef(y_train, ensembling_prediction)</span><br><span class="line">        auc = metrics.roc_auc_score(y_train, ensembling_prediction_proba)</span><br><span class="line">        pos=TP+FN</span><br><span class="line">        neg=FP+TN</span><br><span class="line">        savedata=[<span class="built_in">str</span>(input_files),<span class="string">&quot;正：&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(y_train[y_train == <span class="number">1</span>]))+<span class="string">&#x27;负：&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(y_train[y_train == <span class="number">1</span>])),<span class="string">&#x27;svm&#x27;</span>,ACC,precision, recall,SN,SP, GM,F_measure,F1_Score,MCC,auc,TP,FN,FP,TN]</span><br><span class="line">        final_out_to_excel.append(savedata)</span><br><span class="line">        print(<span class="string">&quot;final_out_to_excel&quot;</span>,final_out_to_excel)</span><br><span class="line">        pd.DataFrame(ensembling_prediction).to_csv(<span class="string">&quot;voting_prediction_label.csv&quot;</span>, header = <span class="literal">None</span>, index = <span class="literal">False</span>)</span><br><span class="line">        pd.DataFrame(ensembling_prediction_proba).to_csv(<span class="string">&quot;voting_prediction_proba_label.csv&quot;</span>, header = <span class="literal">None</span>, index = <span class="literal">False</span>)</span><br><span class="line">        pd.DataFrame(final_out_to_excel).to_excel(<span class="string">&#x27;output&#x27;</span>+<span class="string">&#x27;.xlsx&#x27;</span>,sheet_name=<span class="string">&quot;results&quot;</span>,index=<span class="literal">False</span>,header=<span class="literal">False</span>)</span><br><span class="line">        print(<span class="string">&quot;主进程终止&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        x_len = <span class="number">1000</span></span><br><span class="line">        y_len = <span class="number">1000</span></span><br><span class="line">        file_len = <span class="built_in">len</span>(input_files)</span><br><span class="line">        threshold = file_len/<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> index, input_file <span class="keyword">in</span> <span class="built_in">enumerate</span>(input_files):</span><br><span class="line">            data = pd.read_csv(input_file,header=<span class="literal">None</span>)</span><br><span class="line">            (x_len,y_len) = data.shape</span><br><span class="line">            X_train = data.values</span><br><span class="line">            half_sequence_number = x_len / <span class="number">2</span></span><br><span class="line">            y_train = np.array([<span class="number">1</span> <span class="keyword">if</span> e &lt; half_sequence_number <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> (e,value) <span class="keyword">in</span> <span class="built_in">enumerate</span>(X_train)])</span><br><span class="line">            y_train = y_train.reshape(<span class="number">-1</span>)</span><br><span class="line">            print(<span class="string">&quot;default y_train: &quot;</span>, y_train)</span><br><span class="line">            p=Process(target=worker,name=<span class="string">&quot;worker&quot;</span>+<span class="built_in">str</span>(index),args=(X_train, y_train, cross_validation_value, CPU_value,input_file,share_y_predict_dict,share_y_predict_proba_dict))</span><br><span class="line">            ps.append(p)</span><br><span class="line">        <span class="comment"># 开启进程</span></span><br><span class="line">        <span class="keyword">for</span> index, input_file <span class="keyword">in</span> <span class="built_in">enumerate</span>(input_files):</span><br><span class="line">            ps[index].start()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 阻塞进程</span></span><br><span class="line">        <span class="keyword">for</span> index, input_file <span class="keyword">in</span> <span class="built_in">enumerate</span>(input_files):</span><br><span class="line">            ps[index].join()</span><br><span class="line">        ensembling_prediction = <span class="number">0</span></span><br><span class="line">        ensembling_prediction_proba = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> share_y_predict_dict.items():</span><br><span class="line">            ensembling_prediction = ensembling_prediction + value</span><br><span class="line">        ensembling_prediction = [<span class="number">1</span> <span class="keyword">if</span> e &gt; threshold <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> e <span class="keyword">in</span> ensembling_prediction]</span><br><span class="line">        print(ensembling_prediction)</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> share_y_predict_proba_dict.items():</span><br><span class="line">            ensembling_prediction_proba = ensembling_prediction_proba + value</span><br><span class="line">        ensembling_prediction_proba = ensembling_prediction_proba/<span class="number">3.0</span></span><br><span class="line">        print(ensembling_prediction_proba/<span class="number">3.0</span>)</span><br><span class="line">        ACC=metrics.accuracy_score(y_train,ensembling_prediction)</span><br><span class="line">        print(<span class="string">&quot;ACC&quot;</span>,ACC)</span><br><span class="line">        precision, recall, SN, SP, GM, TP, TN, FP, FN = performance(y_train, ensembling_prediction) </span><br><span class="line">        F1_Score=metrics.f1_score(y_train, ensembling_prediction)</span><br><span class="line">        F_measure=F1_Score</span><br><span class="line">        MCC=metrics.matthews_corrcoef(y_train, ensembling_prediction)</span><br><span class="line">        auc = metrics.roc_auc_score(y_train, ensembling_prediction_proba)</span><br><span class="line">        pos=TP+FN</span><br><span class="line">        neg=FP+TN</span><br><span class="line">        savedata=[<span class="built_in">str</span>(input_files),<span class="string">&quot;正：&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(y_train[y_train == <span class="number">1</span>]))+<span class="string">&#x27;负：&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(y_train[y_train == <span class="number">1</span>])),<span class="string">&#x27;svm&#x27;</span>,ACC,precision, recall,SN,SP, GM,F_measure,F1_Score,MCC,auc,TP,FN,FP,TN]</span><br><span class="line">        final_out_to_excel.append(savedata)</span><br><span class="line">        print(<span class="string">&quot;final_out_to_excel&quot;</span>,final_out_to_excel)</span><br><span class="line">        pd.DataFrame(ensembling_prediction).to_csv(<span class="string">&quot;voting_prediction_label.csv&quot;</span>, header = <span class="literal">None</span>, index = <span class="literal">False</span>)</span><br><span class="line">        pd.DataFrame(ensembling_prediction_proba).to_csv(<span class="string">&quot;voting_prediction_proba_label.csv&quot;</span>, header = <span class="literal">None</span>, index = <span class="literal">False</span>)</span><br><span class="line">        pd.DataFrame(final_out_to_excel).to_excel(<span class="string">&#x27;output&#x27;</span>+<span class="string">&#x27;.xlsx&#x27;</span>,sheet_name=<span class="string">&quot;results&quot;</span>,index=<span class="literal">False</span>,header=<span class="literal">False</span>)</span><br><span class="line">        print(<span class="string">&quot;主进程终止&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      采用多进程多线程的方式进行特征融合和SVM训练的工作。算法中采用得到的是Sklearn的SVC框架，可以设置gridSearch来控制进程的数量，当然如果多个特征文件的多个组合任务时候。可以用本代码的内容。
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>pix2pix tensorflow personal</title>
    <link href="http://yoursite.com/2018/12/19/2018-12-20-pix2pix_tensorflow_personal/"/>
    <id>http://yoursite.com/2018/12/19/2018-12-20-pix2pix_tensorflow_personal/</id>
    <published>2018-12-18T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.364Z</updated>
    
    <content type="html"><![CDATA[<p>本文采用的是tensorflow的eager执行方式对风格迁移算法实现单张图片作为target的训练和测试的过程，由于采用此种的方式的是动态图的实现，因此可以在Jupyter notebook上运行，以下内容是jupyter上的运行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.enable_eager_execution()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> PIL</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> clear_output</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path_to_zip = tf.keras.utils.get_file(<span class="string">&quot;facades.tar.gz&quot;</span>, cache_subdir = os.path.abspath(<span class="string">&#x27;.&#x27;</span>),</span><br><span class="line">                                     origin=<span class="string">&quot;https://people.eecs.berkeley.edu/~tinghuiz/projects/pix2pix/datasets/facades.tar.gz&quot;</span>,</span><br><span class="line">                                     extract=<span class="literal">True</span>)</span><br><span class="line">PATH = os.path.join(os.path.dirname(path_to_zip),<span class="string">&#x27;facades/&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BUFFER_SIZE = <span class="number">400</span></span><br><span class="line">BATCH_SIZE = <span class="number">1</span></span><br><span class="line">IMG_WIDTH = <span class="number">256</span></span><br><span class="line">IMG_HEIGHT = <span class="number">256</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span>(<span class="params">image_file, is_train</span>):</span></span><br><span class="line">    image = tf.read_file(image_file)</span><br><span class="line">    image = tf.image.decode_jpeg(image)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    w = tf.shape(image)[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    w = w//<span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    real_image = image[:, :w, :]</span><br><span class="line">    input_image = image[:, w:, :]</span><br><span class="line">    </span><br><span class="line">    input_image = tf.cast(input_image, tf.float32)</span><br><span class="line">    real_image = tf.cast(real_image, tf.float32)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is_train:</span><br><span class="line">        input_image = tf.image.resize_images(input_image, [<span class="number">286</span>,<span class="number">286</span>],</span><br><span class="line">                                             align_corners=<span class="literal">True</span>,</span><br><span class="line">                                             method = tf.image.ResizeMethod.NEAREST_NEIGHBOR)</span><br><span class="line">        real_image = tf.image.resize_images(real_image, [<span class="number">286</span>, <span class="number">286</span>],</span><br><span class="line">                                            align_corners=<span class="literal">True</span>,</span><br><span class="line">                                            method = tf.image.ResizeMethod.NEAREST_NEIGHBOR)</span><br><span class="line">        stacked_image = tf.stack([input_image, real_image], axis = <span class="number">0</span>)</span><br><span class="line">        cropped_image = tf.random_crop(stacked_image, size = [<span class="number">2</span>, IMG_HEIGHT, IMG_WIDTH, <span class="number">3</span>])</span><br><span class="line">        input_image, real_image = cropped_image[<span class="number">0</span>], cropped_image[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> np.random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">            input_image = tf.image.flip_left_right(input_image)</span><br><span class="line">            real_image = tf.image.flip_left_right(real_image)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        input_image = tf.image.resize_images(input_image, size = [IMG_HEIGHT, IMG_WIDTH],</span><br><span class="line">                                            align_corners = <span class="literal">True</span>, method = <span class="number">2</span>)</span><br><span class="line">        real_image = tf.image.resize_images(real_image, size = [IMG_HEIGHT, IMG_WIDTH],</span><br><span class="line">                                           align_corners = <span class="literal">True</span>, method = <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    input_image = (input_image / <span class="number">127.5</span>) - <span class="number">1</span></span><br><span class="line">    real_image = (real_image / <span class="number">127.5</span>) <span class="number">-1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> input_image, real_image</span><br><span class="line">        </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = tf.data.Dataset.list_files(PATH + <span class="string">&#x27;train/*.jpg&#x27;</span>)</span><br><span class="line">train_dataset = train_dataset.shuffle(BUFFER_SIZE)</span><br><span class="line">train_dataset = train_dataset.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:load_image(x, <span class="literal">True</span>))</span><br><span class="line">train_dataset = train_dataset.batch(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_dataset = tf.data.Dataset.list_files(PATH + <span class="string">&#x27;test/*.jpg&#x27;</span>)</span><br><span class="line">test_dataset = test_dataset.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:load_image(x, <span class="literal">False</span>))</span><br><span class="line">test_dataset = test_dataset.batch(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OUTPUT_CHANNELS = <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downsample</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filters, size, apply_batchnorm = <span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Downsample, self).__init__()</span><br><span class="line">        self.apply_batchnorm = apply_batchnorm</span><br><span class="line">        initializer = tf.random_normal_initializer(<span class="number">0.</span>, <span class="number">0.02</span>)</span><br><span class="line">        </span><br><span class="line">        self.conv1 = tf.keras.layers.Conv2D(filters, </span><br><span class="line">                                            (size,size),</span><br><span class="line">                                           strides=<span class="number">2</span>,</span><br><span class="line">                                            padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                                           kernel_initializer= initializer,</span><br><span class="line">                                            use_bias=<span class="literal">False</span></span><br><span class="line">                                           )</span><br><span class="line">        <span class="keyword">if</span> self.apply_batchnorm:</span><br><span class="line">            self.batchnorm = tf.keras.layers.BatchNormalization()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, x, training</span>):</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">if</span> self.apply_batchnorm:</span><br><span class="line">            x = self.batchnorm(x, training = training)</span><br><span class="line">        x = tf.nn.leaky_relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upsample</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filters, size, apply_dropout = <span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Upsample, self).__init__()</span><br><span class="line">        self.apply_dropout = apply_dropout</span><br><span class="line">        initializer = tf.random_normal_initializer(<span class="number">0.</span>, <span class="number">0.02</span>)</span><br><span class="line">        </span><br><span class="line">        self.up_conv = tf.keras.layers.Conv2DTranspose(filters,</span><br><span class="line">                                                      (size,size),</span><br><span class="line">                                                      strides = <span class="number">2</span>,</span><br><span class="line">                                                      padding = <span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                                                      kernel_initializer = initializer,</span><br><span class="line">                                                      use_bias = <span class="literal">False</span>)</span><br><span class="line">        self.batchnorm = tf.keras.layers.BatchNormalization()</span><br><span class="line">        <span class="keyword">if</span> self.apply_dropout:</span><br><span class="line">            self.dropout = tf.keras.layers.Dropout(<span class="number">0.5</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, x1, x2, training</span>):</span></span><br><span class="line">        x = self.up_conv(x1)</span><br><span class="line">        x = self.batchnorm(x, training = training)</span><br><span class="line">        <span class="keyword">if</span> self.apply_dropout:</span><br><span class="line">            x = self.dropout(x, training = training)</span><br><span class="line">        x = tf.nn.relu(x)</span><br><span class="line">        x = tf.concat([x, x2], axis = <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Generator, self).__init__()</span><br><span class="line">        initializer = tf.random_normal_initializer(<span class="number">0.</span>, <span class="number">0.02</span>)</span><br><span class="line">        </span><br><span class="line">        self.down1 = Downsample(<span class="number">64</span>, <span class="number">4</span>, apply_batchnorm = <span class="literal">False</span>)</span><br><span class="line">        self.down2 = Downsample(<span class="number">128</span>, <span class="number">4</span>)</span><br><span class="line">        self.down3 = Downsample(<span class="number">256</span>, <span class="number">4</span>)</span><br><span class="line">        self.down4 = Downsample(<span class="number">512</span>, <span class="number">4</span>)</span><br><span class="line">        self.down5 = Downsample(<span class="number">512</span>, <span class="number">4</span>)</span><br><span class="line">        self.down6 = Downsample(<span class="number">512</span>, <span class="number">4</span>)</span><br><span class="line">        self.down7 = Downsample(<span class="number">512</span>, <span class="number">4</span>)</span><br><span class="line">        self.down8 = Downsample(<span class="number">512</span>, <span class="number">4</span>)</span><br><span class="line">        </span><br><span class="line">        self.up1 = Upsample(<span class="number">512</span>, <span class="number">4</span>, apply_dropout = <span class="literal">True</span>)</span><br><span class="line">        self.up2 = Upsample(<span class="number">512</span>, <span class="number">4</span>, apply_dropout = <span class="literal">True</span>)</span><br><span class="line">        self.up3 = Upsample(<span class="number">512</span>, <span class="number">4</span>, apply_dropout = <span class="literal">True</span>)</span><br><span class="line">        self.up4 = Upsample(<span class="number">512</span>, <span class="number">4</span>)</span><br><span class="line">        self.up5 = Upsample(<span class="number">256</span>, <span class="number">4</span>)</span><br><span class="line">        self.up6 = Upsample(<span class="number">128</span>, <span class="number">4</span>)</span><br><span class="line">        self.up7 = Upsample(<span class="number">64</span>, <span class="number">4</span>)</span><br><span class="line">        </span><br><span class="line">        self.last = tf.keras.layers.Conv2DTranspose(OUTPUT_CHANNELS,</span><br><span class="line">                                                   (<span class="number">4</span>, <span class="number">4</span>),</span><br><span class="line">                                                   strides = <span class="number">2</span>,</span><br><span class="line">                                                   padding = <span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                                                   kernel_initializer = initializer)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @tf.contrib.eager.defun</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, x, training</span>):</span></span><br><span class="line">        x1 = self.down1(x, training = training)</span><br><span class="line">        x2 = self.down2(x1, training = training)</span><br><span class="line">        x3 = self.down3(x2,training = training)</span><br><span class="line">        x4 = self.down4(x3, training = training)</span><br><span class="line">        x5 = self.down5(x4, training = training)</span><br><span class="line">        x6 = self.down6(x5, training = training)</span><br><span class="line">        x7 = self.down7(x6, training = training)</span><br><span class="line">        x8 = self.down8(x7, training = training)</span><br><span class="line">        </span><br><span class="line">        x9 = self.up1(x8, x7, training = training)</span><br><span class="line">        x10 = self.up2(x9, x6, training = training)</span><br><span class="line">        x11 = self.up3(x10, x5, training = training)</span><br><span class="line">        x12 = self.up4(x11, x4, training = training)</span><br><span class="line">        x13 = self.up5(x12, x3, training = training)</span><br><span class="line">        x14 = self.up6(x13, x2, training = training)</span><br><span class="line">        x15 = self.up7(x14, x1, training = training)</span><br><span class="line">        </span><br><span class="line">        x16 = self.last(x15)</span><br><span class="line">        x16 = tf.nn.tanh(x16)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x16</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiscDownsample</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filters, size, apply_batchnorm = <span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(DiscDownsample, self).__init__()</span><br><span class="line">        self.apply_batchnorm = apply_batchnorm</span><br><span class="line">        initializer = tf.random_normal_initializer(<span class="number">0.</span>, <span class="number">0.02</span>)</span><br><span class="line">        </span><br><span class="line">        self.conv1 = tf.keras.layers.Conv2D(filters,</span><br><span class="line">                                                       (size, size),</span><br><span class="line">                                                       strides = <span class="number">2</span>,</span><br><span class="line">                                                       padding = <span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">                                                       kernel_initializer = initializer,</span><br><span class="line">                                                       use_bias = <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> self.apply_batchnorm:</span><br><span class="line">            self.batchnorm = tf.keras.layers.BatchNormalization()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, x, training</span>):</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">if</span> self.apply_batchnorm:</span><br><span class="line">            x = self.batchnorm(x, training = training)</span><br><span class="line">        x= tf.nn.leaky_relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Discriminator</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Discriminator, self).__init__()</span><br><span class="line">        initializer = tf.random_normal_initializer(<span class="number">0.</span>, <span class="number">0.02</span>)</span><br><span class="line">        </span><br><span class="line">        self.down1 = DiscDownsample(<span class="number">64</span>, <span class="number">4</span>, <span class="literal">False</span>)</span><br><span class="line">        self.down2 = DiscDownsample(<span class="number">128</span>, <span class="number">4</span>)</span><br><span class="line">        self.down3 = DiscDownsample(<span class="number">256</span>, <span class="number">4</span>)</span><br><span class="line">        </span><br><span class="line">        self.zero_pad1 = tf.keras.layers.ZeroPadding2D()</span><br><span class="line">        self.conv = tf.keras.layers.Conv2D(<span class="number">512</span>,</span><br><span class="line">                                          (<span class="number">4</span>, <span class="number">4</span>),</span><br><span class="line">                                          strides = <span class="number">1</span>,</span><br><span class="line">                                          kernel_initializer = initializer,</span><br><span class="line">                                          use_bias = <span class="literal">False</span>)</span><br><span class="line">        self.batchnorm1 = tf.keras.layers.BatchNormalization()</span><br><span class="line">        </span><br><span class="line">        self.zero_pad2 = tf.keras.layers.ZeroPadding2D()</span><br><span class="line">        self.last = tf.keras.layers.Conv2D(<span class="number">1</span>,</span><br><span class="line">                                          (<span class="number">4</span>, <span class="number">4</span>),</span><br><span class="line">                                          strides = <span class="number">1</span>,</span><br><span class="line">                                          kernel_initializer = initializer)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @tf.contrib.eager.defun</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, inp, tar, training</span>):</span></span><br><span class="line">        x = tf.concat([inp, tar], axis = <span class="number">1</span>)</span><br><span class="line">        x = self.down1(x, training = training)</span><br><span class="line">        x = self.down2(x, training = training)</span><br><span class="line">        x = self.down3(x, training = training)</span><br><span class="line">        </span><br><span class="line">        x = self.zero_pad1(x)</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = self.batchnorm1(x, training = training)</span><br><span class="line">        x = tf.nn.leaky_relu(x)</span><br><span class="line">        </span><br><span class="line">        x = self.zero_pad2(x)</span><br><span class="line">        </span><br><span class="line">        x = self.last(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">generator = Generator()</span><br><span class="line">discriminator = Discriminator()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LAMBDA = <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">discriminator_loss</span>(<span class="params">disc_real_output, disc_generated_output</span>):</span></span><br><span class="line">    real_loss = tf.losses.sigmoid_cross_entropy(multi_class_labels = tf.ones_like(disc_real_output),</span><br><span class="line">                                               logits = disc_real_output)</span><br><span class="line">    </span><br><span class="line">    generated_loss = tf.losses.sigmoid_cross_entropy(multi_class_labels= tf.zeros_like(disc_generated_output),</span><br><span class="line">                                                    logits = disc_generated_output)</span><br><span class="line">    </span><br><span class="line">    total_disc_loss = real_loss + generated_loss</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>  total_disc_loss</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_loss</span>(<span class="params">disc_generated_output, gen_output, target</span>):</span></span><br><span class="line">    gan_loss = tf.losses.sigmoid_cross_entropy(multi_class_labels=tf.ones_like(disc_generated_output),</span><br><span class="line">                                              logits = disc_generated_output)</span><br><span class="line">    l1_loss = tf.reduce_mean(tf.<span class="built_in">abs</span>(target - gen_output))</span><br><span class="line">    total_gen_loss = gan_loss + (LAMBDA * l1_loss)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> total_gen_loss</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">generator_optimizer = tf.train.AdamOptimizer(<span class="number">2e-4</span>, beta1 = <span class="number">0.5</span>)</span><br><span class="line">discriminator_optimizer = tf.train.AdamOptimizer(<span class="number">2e-4</span>, beta1 = <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">checkpoint_dir = <span class="string">&#x27;./training_checkpoints&#x27;</span></span><br><span class="line">checkpoint_prefix = os.path.join(checkpoint_dir, <span class="string">&#x27;ckpt&#x27;</span>)</span><br><span class="line">checkpoint = tf.train.Checkpoint(generator_optimizer = generator_optimizer,</span><br><span class="line">                                discriminator_optimizer = discriminator_optimizer,</span><br><span class="line">                                generator = generator,</span><br><span class="line">                                discriminator = discriminator)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EPOCHS = <span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generated_images</span>(<span class="params">model, test_input, tar</span>):</span></span><br><span class="line">    predictions = model(test_input, training = <span class="literal">True</span>)</span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">    </span><br><span class="line">    display_list = [test_input[<span class="number">0</span>], tar[<span class="number">0</span>], predictions[<span class="number">0</span>]]</span><br><span class="line">    title = [<span class="string">&#x27;Input Image&#x27;</span>, <span class="string">&#x27;Ground Truth&#x27;</span>, <span class="string">&#x27;Predicted Image&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        plt.subplot(<span class="number">1</span>,<span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">        plt.title(title[i])</span><br><span class="line">        </span><br><span class="line">        plt.imshow(display_list[i] *<span class="number">0.5</span> +<span class="number">0.5</span>)</span><br><span class="line">        plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">dataset, epochs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        start = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> input_image, target <span class="keyword">in</span> dataset:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> gen_tape, tf.GradientTape() <span class="keyword">as</span> disc_tape:</span><br><span class="line">                gen_output = generator(input_image, training = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">                disc_real_output = discriminator(input_image, target, training = <span class="literal">True</span>)</span><br><span class="line">                disc_generated_output = discriminator(input_image, gen_output, training = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">                gen_loss = generator_loss(disc_generated_output, gen_output, target)</span><br><span class="line">                disc_loss = discriminator_loss(disc_real_output, disc_generated_output)</span><br><span class="line"></span><br><span class="line">            generator_gradients = gen_tape.gradient(gen_loss,</span><br><span class="line">                                                   generator.variables)</span><br><span class="line">            discriminator_gradients = disc_tape.gradient(disc_loss,</span><br><span class="line">                                                        discriminator.variables)</span><br><span class="line"></span><br><span class="line">            generator_optimizer.apply_gradients(<span class="built_in">zip</span>(generator_gradients, generator.variables))</span><br><span class="line">            discriminator_optimizer.apply_gradients(<span class="built_in">zip</span>(discriminator_gradients, discriminator.variables))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> epoch %<span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">            clear_output(wait=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">for</span> inp, tar <span class="keyword">in</span> test_dataset.take(<span class="number">1</span>):</span><br><span class="line">                generated_images(generator, inp, tar)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (epoch + <span class="number">1</span>) % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">            checkpoint.save(file_prefix = checkpoint_prefix)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Time taken for epoch &#123;&#125; is &#123;&#125; sec\n&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>,</span><br><span class="line">                                                          time.time() -start))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train(train_dataset, EPOCHS)</span><br></pre></td></tr></table></figure><p><img src="/images/output_18_0.png" alt="png"></p><pre><code>Time taken for epoch 200 is 56.112149238586426 sec</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))</span><br></pre></td></tr></table></figure><pre><code>&lt;tensorflow.python.training.checkpointable.util.CheckpointLoadStatus at 0x7f5b8c628d68&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> inp, tar <span class="keyword">in</span> test_dataset:</span><br><span class="line">    generated_images(generator, inp, tar)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文采用的是tensorflow的eager执行方式对风格迁移算法实现单张图片作为target的训练和测试的过程，由于采用此种的方式的是动态图的实现，因此可以在Jupyter notebook上运行，以下内容是jupyter上的运行结果。
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ZigZag Conversion</title>
    <link href="http://yoursite.com/2018/12/04/2018-12-4-ZigZag_Conversion/"/>
    <id>http://yoursite.com/2018/12/04/2018-12-4-ZigZag_Conversion/</id>
    <published>2018-12-03T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ZigZag-Conversion"><a href="#ZigZag-Conversion" class="headerlink" title="ZigZag Conversion"></a>ZigZag Conversion</h2><p><a href="https://leetcode.com/problems/zigzag-conversion/">orignal problem description</a></p><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">The string &quot;PAYPALISHIRING&quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</span><br><span class="line"></span><br><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br><span class="line"></span><br><span class="line">And then read line by line: &quot;PAHNAPLSIIGYIR&quot;</span><br><span class="line"></span><br><span class="line">Write the code that will take a string and make this conversion given a number of rows:</span><br><span class="line"></span><br><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 3</span><br><span class="line">Output: &quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 4</span><br><span class="line">Output: &quot;PINALSIGYAHRPI&quot;</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure><h3 id="answer"><a href="#answer" class="headerlink" title="answer"></a>answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">self, s, numRows</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type numRows: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        row_values = [<span class="string">&quot;&quot;</span>]*numRows</span><br><span class="line">        s_length = <span class="built_in">len</span>(s)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">&quot;&quot;</span>.join(row_values))</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(row_values):</span><br><span class="line">            length = index</span><br><span class="line">            mark = <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> length &lt; s_length:</span><br><span class="line">                <span class="keyword">if</span> index != <span class="number">0</span> <span class="keyword">and</span> index != (numRows<span class="number">-1</span>):</span><br><span class="line">                    row_values[index] += s[length]</span><br><span class="line">                    <span class="keyword">if</span> mark == <span class="number">1</span> :</span><br><span class="line">                        length += (numRows - index<span class="number">-1</span>)*<span class="number">2</span></span><br><span class="line">                    <span class="keyword">elif</span> mark == <span class="number">2</span>:</span><br><span class="line">                        length += (index)*<span class="number">2</span></span><br><span class="line">                    mark = <span class="number">2</span>/mark</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    row_values[index] += s[length]</span><br><span class="line">                    length += (numRows<span class="number">-1</span>)*<span class="number">2</span></span><br><span class="line">        print(<span class="string">&quot;&quot;</span>.join(row_values))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(row_values)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      The string &quot;PAYPALISHIRING&quot; is written in a zigzag pattern on a given number of rows like this you may want to display this pattern in a fixed font for better legibility
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>downloading images from google</title>
    <link href="http://yoursite.com/2018/11/13/2018-11-13-downloading-images-from-google/"/>
    <id>http://yoursite.com/2018/11/13/2018-11-13-downloading-images-from-google/</id>
    <published>2018-11-12T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.362Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">really used in fetching url from google images</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:a</span><br><span class="line">    pd_data = pd.read_excel(<span class="string">&quot;cleaning_data.xlsx&quot;</span>, header=<span class="literal">None</span>)</span><br><span class="line">    row = <span class="number">7</span></span><br><span class="line">    whole_data = []</span><br><span class="line">    <span class="keyword">for</span> i_index <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">        <span class="keyword">if</span> i_index != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> pd_data[<span class="number">20</span>:<span class="number">31</span>][i_index].values:</span><br><span class="line">                <span class="keyword">if</span>  <span class="built_in">str</span>(line).strip() != <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">str</span>(line).strip() != <span class="string">&quot;&quot;</span> <span class="keyword">and</span> <span class="built_in">str</span>(line).strip() != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                    print(line.strip())</span><br><span class="line">                    whole_data.append(line.strip())</span><br><span class="line">    print(<span class="built_in">len</span>(whole_data))</span><br><span class="line">    length_whole_data = <span class="built_in">len</span>(whole_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index_whole_data <span class="keyword">in</span> <span class="built_in">range</span>(length_whole_data):</span><br><span class="line">        wikiart_path = whole_data[index_whole_data]  <span class="comment">#&quot;wikiart&quot;</span></span><br><span class="line">        original_url =  <span class="string">&#x27;https://www.google.co.jp/search?q=&#x27;</span> + wikiart_path + <span class="string">&#x27;&amp;safe=active&amp;rlz=1C1GCEU_zh-CNJP821&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwjYhuif2dDeAhWLF3IKHQIvD1gQ_AUIFCgC&amp;biw=1920&amp;bih=1088&#x27;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        temp_path = wikiart_path + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;temp_google_img_asserts_all2.txt&quot;</span></span><br><span class="line">        path = wikiart_path + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;google_img_asserts_all2.txt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># os.environ[&quot;PATH&quot;] += os.pathsep + &#x27;D:\google-art-downloader-master&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(wikiart_path):</span><br><span class="line">            os.makedirs(wikiart_path)</span><br><span class="line">        <span class="comment"># option = webdriver.ChromeOptions()</span></span><br><span class="line">        <span class="comment"># option.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line">        <span class="comment"># option.add_argument(&#x27;--disable-gpu&#x27;)</span></span><br><span class="line">        <span class="comment"># browser = webdriver.Chrome(chrome_options = option)</span></span><br><span class="line">        fireFoxOptions = webdriver.FirefoxOptions()</span><br><span class="line">        fireFoxOptions.set_headless()</span><br><span class="line">        browser = webdriver.Firefox(firefox_options=fireFoxOptions)</span><br><span class="line"></span><br><span class="line">        asserts_all=<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">        mark_time = <span class="number">0</span></span><br><span class="line">        last_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ------------------test start------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># browser.get(original_url)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        now_len = <span class="number">0</span></span><br><span class="line">        pre_len = <span class="number">0</span></span><br><span class="line">        count_all = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            browser.get(original_url)</span><br><span class="line">        <span class="comment">#  js=&quot;var q=document.documentElement.scrollTop=100000&quot;</span></span><br><span class="line">        <span class="comment">#  browser.execute_script(js)</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">                time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">                browser.execute_script(<span class="string">&quot;window.scrollBy(0,1500)&quot;</span>)</span><br><span class="line">        <span class="comment">#         print(browser.find_element_by_xpath(&#x27;//*[@id=&quot;smb&quot;]&#x27;))</span></span><br><span class="line"></span><br><span class="line">                pageSource = browser.page_source</span><br><span class="line">                soup = BeautifulSoup(pageSource,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">                asserts = soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;rg_meta&quot;</span>&#125;)</span><br><span class="line">                <span class="keyword">for</span> assert_value <span class="keyword">in</span> asserts:</span><br><span class="line">                    data = re.sub(<span class="string">r&#x27;&lt;.*?&gt;&#x27;</span> ,<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(assert_value))</span><br><span class="line">                    data = ast.literal_eval(data)</span><br><span class="line">        <span class="comment">#             print(data.get(&quot;ou&quot;))</span></span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(temp_path,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> w_file:</span><br><span class="line">                        w_file.write(<span class="built_in">str</span>(data.get(<span class="string">&quot;ou&quot;</span>)) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    asserts_all.add(<span class="built_in">str</span>(data.get(<span class="string">&quot;ou&quot;</span>)))</span><br><span class="line">                print(<span class="built_in">len</span>(asserts_all))</span><br><span class="line">                now_len = <span class="built_in">len</span>(asserts_all)</span><br><span class="line">                <span class="keyword">if</span> now_len == pre_len:</span><br><span class="line">                    count_all += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    count_all = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> count_all &gt;=<span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> count_all == <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">if</span> browser.find_element_by_id(<span class="string">&quot;smb&quot;</span>) != <span class="literal">None</span> <span class="keyword">and</span> browser.find_element_by_id(<span class="string">&quot;smb&quot;</span>) != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                        browser.find_element_by_id(<span class="string">&quot;smb&quot;</span>).click()</span><br><span class="line">                pre_len = now_len</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;global&quot;</span>,e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> write_file:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> asserts_all:</span><br><span class="line">                    write_file.write(<span class="built_in">str</span>(line)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="comment">#     pass</span></span><br><span class="line">            browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      google搜索出来的google images的图片爬取工作。由于google跟百度采用的是不一样的方式呈现图片的形式，google还给出了图片相似性计算的结果。因此额外也写了一个爬取google图片urls的代码。用到了 Selenium。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>taking image urls from pinterest</title>
    <link href="http://yoursite.com/2018/11/13/2018-11-13-taking-image-urls-from-pinterest/"/>
    <id>http://yoursite.com/2018/11/13/2018-11-13-taking-image-urls-from-pinterest/</id>
    <published>2018-11-12T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.362Z</updated>
    
    <content type="html"><![CDATA[<p>采用的是瀑布流的形式展现图片内容，无需用户翻页，新的图片不断自动加载在页面底端，让用户不断的发现新的图片。<br>Pinterest堪称图片版的Twitter，网民可以将感兴趣的图片在Pinterest保存，其他网友可以关注，也可以转发图片。索尼等许多公司也在Pinterest建立了主页，用图片营销旗下的产品和服务。本文实现了对Pinterest图片的爬取工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">really used in fetching url from https://artsandculture.google.com/entity/m0bwbv?categoryid=art-movement</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">temp_path =<span class="string">&quot;temp_chinese_pinterest_img_asserts_all2.txt&quot;</span></span><br><span class="line">path =<span class="string">&quot;chinese_pinterest_img_asserts_all2.txt&quot;</span></span><br><span class="line"></span><br><span class="line">wikiart_path = <span class="string">&#x27;chinese-painting&#x27;</span>  <span class="comment">#&quot;wikiart&quot;</span></span><br><span class="line">original_url =  <span class="string">&#x27;https://www.pinterest.jp/jimmyyeji/%E4%B8%AD%E5%9B%BD%E4%B9%A6%E7%94%BB-chinese-painting/&#x27;</span>  <span class="comment"># &#x27;https://www.wikiart.org/en/paintings-by-style/cubism?select=featured#!#filterName:featured,viewType:masonry&#x27;</span></span><br><span class="line"><span class="comment"># os.environ[&quot;PATH&quot;] += os.pathsep + &#x27;D:\google-art-downloader-master&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(wikiart_path):</span><br><span class="line">    os.makedirs(wikiart_path)</span><br><span class="line"><span class="comment"># option = webdriver.ChromeOptions()</span></span><br><span class="line"><span class="comment"># option.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line"><span class="comment"># option.add_argument(&#x27;--disable-gpu&#x27;)</span></span><br><span class="line"><span class="comment"># browser = webdriver.Chrome(chrome_options = option)</span></span><br><span class="line">fireFoxOptions = webdriver.FirefoxOptions()</span><br><span class="line">fireFoxOptions.set_headless()</span><br><span class="line">browser = webdriver.Firefox(firefox_options=fireFoxOptions)</span><br><span class="line"></span><br><span class="line">asserts_all=<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">mark_time = <span class="number">0</span></span><br><span class="line">last_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------test start------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># browser.get(original_url)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now_len = <span class="number">0</span></span><br><span class="line">pre_len = <span class="number">0</span></span><br><span class="line">count__all = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(original_url)</span><br><span class="line"><span class="comment">#  js=&quot;var q=document.documentElement.scrollTop=100000&quot;</span></span><br><span class="line"><span class="comment">#  browser.execute_script(js)</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        browser.execute_script(<span class="string">&quot;window.scrollBy(0,300)&quot;</span>)</span><br><span class="line">        pageSource = browser.page_source</span><br><span class="line">        soup = BeautifulSoup(pageSource,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        asserts = soup.find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> assert_value <span class="keyword">in</span> asserts:</span><br><span class="line">            <span class="keyword">if</span> assert_value.get(<span class="string">&quot;src&quot;</span>) != <span class="literal">None</span> <span class="keyword">and</span> assert_value.get(<span class="string">&quot;src&quot;</span>) != <span class="string">&quot;&quot;</span> <span class="keyword">and</span> assert_value.get(<span class="string">&quot;src&quot;</span>).find(<span class="string">&quot;236x&quot;</span>) != <span class="number">-1</span>:</span><br><span class="line">                print(re.sub(<span class="string">r&#x27;236x&#x27;</span>,<span class="string">&quot;originals&quot;</span>,assert_value.get(<span class="string">&quot;src&quot;</span>)))</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(temp_path,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> w_file:</span><br><span class="line">                    w_file.write(<span class="built_in">str</span>(re.sub(<span class="string">r&#x27;236x&#x27;</span>,<span class="string">&quot;originals&quot;</span>,assert_value.get(<span class="string">&quot;src&quot;</span>))) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                asserts_all.add(re.sub(<span class="string">r&#x27;236x&#x27;</span>,<span class="string">&quot;originals&quot;</span>,assert_value.get(<span class="string">&quot;src&quot;</span>)))</span><br><span class="line">        print(<span class="built_in">len</span>(asserts_all))</span><br><span class="line">        now_len = <span class="built_in">len</span>(asserts_all)</span><br><span class="line">        <span class="keyword">if</span> now_len == pre_len:</span><br><span class="line">            count_all += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count_all = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> count_all &gt;=<span class="number">10</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        pre_len = now_len</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> write_file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> asserts_all:</span><br><span class="line">            write_file.write(<span class="built_in">str</span>(line)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&quot;global&quot;</span>,e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      采用的是瀑布流的形式展现图片内容，无需用户翻页，新的图片不断自动加载在页面底端，让用户不断的发现新的图片。Pinterest堪称图片版的Twitter，网民可以将感兴趣的图片在Pinterest保存，其他网友可以关注，也可以转发图片。索尼等许多公司也在Pinterest建立了主页，用图片营销旗下的产品和服务。本文实现了对Pinterest图片的爬取工作。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>virtual xshell</title>
    <link href="http://yoursite.com/2018/10/31/2018-10-31-virtual-xshell/"/>
    <id>http://yoursite.com/2018/10/31/2018-10-31-virtual-xshell/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.361Z</updated>
    
    <content type="html"><![CDATA[<p>在爬虫需要桌面的情况下，如果我们使用的是终端的Linux服务器，此时就会陷入两难的境地。因为可以采用模拟桌面的情况来进行一个虚拟桌面的设置，该种情况可以考虑成一个没有硬件资源的虚拟桌面，人是看不到的。但是符合程序运行的需求就可以。</p><h2 id="linux上只有字符界面的时候需要模拟xshell"><a href="#linux上只有字符界面的时候需要模拟xshell" class="headerlink" title="linux上只有字符界面的时候需要模拟xshell"></a>linux上只有字符界面的时候需要模拟xshell</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xvfb</span><br></pre></td></tr></table></figure><h3 id="2-运行命令"><a href="#2-运行命令" class="headerlink" title="2.运行命令"></a>2.运行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Xvfb -ac :7 -screen 0 1280x1024x8</span><br></pre></td></tr></table></figure><h3 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3.设置环境变量"></a>3.设置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export  DISPLAY&#x3D;:7</span><br></pre></td></tr></table></figure><h3 id="4-运行程序"><a href="#4-运行程序" class="headerlink" title="4.运行程序"></a>4.运行程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;google-chrome-stable http:&#x2F;&#x2F;www.baidu.com</span><br><span class="line">或者</span><br><span class="line">firefox http:&#x2F;&#x2F;www.baidu.com  </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在爬虫需要桌面的情况下，如果我们使用的是终端的Linux服务器，此时就会陷入两难的境地。因为可以采用模拟桌面的情况来进行一个虚拟桌面的设置，该种情况可以考虑成一个没有硬件资源的虚拟桌面，人是看不到的。但是符合程序运行的需求就可以。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>scrapy downloading images</title>
    <link href="http://yoursite.com/2018/10/26/2018-10-26-scrapy-downloading-images/"/>
    <id>http://yoursite.com/2018/10/26/2018-10-26-scrapy-downloading-images/</id>
    <published>2018-10-25T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.361Z</updated>
    
    <content type="html"><![CDATA[<p>之前介绍了自己编写的多进程多线程实现，发现Scrapy这个框架更好，它拥有多线程的速度，并且会提示你有哪些图片没有爬取下来，完成了多少张图片的爬取之类的信息，而且使用起来非常方便，可以直接pip安装。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="comment"># import codecs</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bingproxy <span class="keyword">import</span> BingProxy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagesSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&quot;images&quot;</span></span><br><span class="line">    dir_path = <span class="string">&quot;huaban_bingproxy_big_images&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_path):</span><br><span class="line">        os.makedirs(dir_path)</span><br><span class="line"><span class="comment">#    allowed_domains = [&quot;tyst.migu.cn&quot;]</span></span><br><span class="line">    start_urls = []  </span><br><span class="line">    bingProxy = BingProxy()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;processing_threading_huaban_big_images_all_urls_part3.txt&#x27;</span>) <span class="keyword">as</span> url_list:</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">                url = url.strip()</span><br><span class="line">                <span class="comment">#yield scrapy.Request(url = self.bingProxy.get_proxy_url(url), meta = &#123;&quot;origin_rul&quot;: url&#125;, callback = self.parse )</span></span><br><span class="line">                <span class="keyword">if</span> url != <span class="string">&quot;&quot;</span> <span class="keyword">and</span> url != <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">yield</span> scrapy.Request(url = url, callback=self.parse,method=<span class="string">&quot;get&quot;</span>)</span><br><span class="line">    <span class="comment">#def __init__(self, urlfile=None,*args, **kwargs):</span></span><br><span class="line">     <span class="comment">#   super(MusicSpider, self).__init__(*args, **kwargs)</span></span><br><span class="line">      <span class="comment">#  uf = codecs.open(urlfile, &#x27;r&#x27;, &#x27;utf-8&#x27;)</span></span><br><span class="line">       <span class="comment"># urls = [line.strip() for line in uf.readlines()]</span></span><br><span class="line">        <span class="comment">#self.start_urls = urls</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        path = <span class="string">&quot;huaban_bingproxy_big_images&quot;</span> +<span class="string">&quot;/&quot;</span>+response.url.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>] + <span class="string">&quot;.png&quot;</span></span><br><span class="line">        <span class="comment"># path = path.split(&#x27;?&#x27;)[0]</span></span><br><span class="line">        <span class="comment"># self.logger.info(&#x27;Saving mp3 %s&#x27;, path)</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      之前介绍了自己编写的多进程多线程实现，发现Scrapy这个框架更好，它拥有多线程的速度，并且会提示你有哪些图片没有爬取下来，完成了多少张图片的爬取之类的信息，而且使用起来非常方便，可以直接pip安装。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>downloading images urls from wikiart</title>
    <link href="http://yoursite.com/2018/10/26/2018-10-26-downloading-images-from-wikiart/"/>
    <id>http://yoursite.com/2018/10/26/2018-10-26-downloading-images-from-wikiart/</id>
    <published>2018-10-25T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.360Z</updated>
    
    <content type="html"><![CDATA[<p>本文实现的是爬取wikiart上的数据，通过Selenium的方式来实现的动态加载，动态获取图片的urls，同时使用到了BeautifulSoup这个框架来对数据进行处理。Selenium同时需要安装Chrome.exe插件，如果在windows上使用的话。各个平台的情况不一。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">really used in fetching url from wikiart</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment"># os.environ[&quot;PATH&quot;] += os.pathsep + &#x27;D:\google-art-downloader-master&#x27;</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment"># chrome_options.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line">browser = webdriver.Chrome(chrome_options = chrome_options)</span><br><span class="line"></span><br><span class="line">asserts_all=<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">mark_time = <span class="number">0</span></span><br><span class="line">last_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">&#x27;https://www.wikiart.org/en/paintings-by-style/ink-and-wash-painting?select=featured#!#filterName:featured,viewType:masonry&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> mark_time &lt;= <span class="number">5</span>:</span><br><span class="line">        pageSource = browser.page_source</span><br><span class="line">        soup = BeautifulSoup(pageSource,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        asserts = soup.find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> assert_value <span class="keyword">in</span> asserts:</span><br><span class="line">            <span class="keyword">if</span> assert_value.get(<span class="string">&quot;src&quot;</span>) != <span class="literal">None</span> <span class="keyword">and</span> assert_value.get(<span class="string">&quot;src&quot;</span>) != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                asserts_all.add(<span class="built_in">str</span>(assert_value.get(<span class="string">&quot;src&quot;</span>)).replace(<span class="string">&quot;!Large.jpg&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;!PinterestSmall.jpg&quot;</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="comment">#                 print(str(assert_value.get(&quot;src&quot;)).replace(&quot;!Large.jpg&quot;,&quot;&quot;).replace(&quot;!PinterestSmall.jpg&quot;,&quot;&quot;))</span></span><br><span class="line">        <span class="comment">#     for assert_value in asserts:</span></span><br><span class="line">        now_value = <span class="built_in">len</span>(asserts_all)</span><br><span class="line">        print(now_value)</span><br><span class="line">        <span class="keyword">if</span> last_value == now_value:</span><br><span class="line">            mark_time += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mark_time == <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            browser.find_element_by_xpath(<span class="string">&#x27;/html/body/div[2]/div[1]/section/main/div[4]/div/div/div[3]/a/span[3]&#x27;</span>).click()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        last_value = now_value</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">    google_arts_images_urls = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;wikiart_ink_and_wash_images_urls.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> write_file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> asserts_all:</span><br><span class="line">            write_file.write(line+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&quot;global&quot;</span>,e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文实现的是爬取wikiart上的数据，通过Selenium的方式来实现的动态加载，动态获取图片的urls，同时使用到了BeautifulSoup这个框架来对数据进行处理。Selenium同时需要安装Chrome.exe插件，如果在windows上使用的话。各个平台的情况不一。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Using multiple processing to download images based on image URLS</title>
    <link href="http://yoursite.com/2018/10/24/2018-10-24-Using-multiple-processing-to-download-images-based-on-image-URLS/"/>
    <id>http://yoursite.com/2018/10/24/2018-10-24-Using-multiple-processing-to-download-images-based-on-image-URLS/</id>
    <published>2018-10-23T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.359Z</updated>
    
    <content type="html"><![CDATA[<p>本文中实现的是在获取到所有大数据量的图片urls信息之后，如果抓取图片到本地的方式。因为单机单线程的方式效率非常低，因此考虑到这种情况便编写了一个多进程多线程的爬虫方式，可以很快速的以超n倍单线程的速度进行图片爬取。（后来发现Scrapy框架也能够以超高的速度进行下载）。由于本人在微软实习需要的测试数据量是非常巨大的，这种情况肯定是会被网站封杀和禁止的，好在内部集成了一个几千台的电脑集群，可以通过一个接口调用进行任务分担的情况。因为是接口的形式，所以也可以在该代码中应用，只需要修改downloading_images函数即可。读者若有类似的情况可以参考。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime </span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;program start %s&quot;</span>%ctime())</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;huaban_tem_images&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">    os.makedirs(path)</span><br><span class="line"></span><br><span class="line">url_set = []</span><br><span class="line">filename_set = []</span><br><span class="line">temp_url_set = []</span><br><span class="line">temp_filename_set = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;images_urls.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> read_file:</span><br><span class="line">    all_lines = read_file.readlines()</span><br><span class="line">    print(<span class="string">&quot;number: &quot;</span>,<span class="built_in">len</span>(all_lines))</span><br><span class="line">    len_all_lines = <span class="built_in">len</span>(all_lines)</span><br><span class="line">    <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(all_lines):</span><br><span class="line">        url = line.strip()</span><br><span class="line">        temp_url_set.append(url)</span><br><span class="line">        file_name = path + <span class="string">&quot;/&quot;</span> +<span class="built_in">str</span>(url.split(<span class="string">&quot;/&quot;</span>)[<span class="number">-1</span>]) + <span class="string">&quot;.png&quot;</span></span><br><span class="line">        temp_filename_set.append(file_name)</span><br><span class="line">        <span class="keyword">if</span> (index + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">or</span> index == (len_all_lines - <span class="number">1</span>):</span><br><span class="line">            url_set.append(temp_url_set)</span><br><span class="line">            filename_set.append(temp_filename_set)</span><br><span class="line">            temp_url_set = []</span><br><span class="line">            temp_filename_set = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloading_images</span>(<span class="params">url, filename</span>):</span></span><br><span class="line"><span class="comment">#         print(&quot;start downloading&quot;, url)</span></span><br><span class="line">        urllib.request.urlretrieve(url, filename = filename)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">&quot;end downloading&quot;</span>, url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    epoch = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (urls, filenames) <span class="keyword">in</span> <span class="built_in">zip</span>(url_set, filename_set):</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> (url, filename) <span class="keyword">in</span> <span class="built_in">zip</span>(urls, filenames):</span><br><span class="line">            t = threading.Thread(target=downloading_images, args=(url, filename))</span><br><span class="line">            threads.append(t)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(threads)):</span><br><span class="line">            threads[i].start()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(threads)):</span><br><span class="line">            threads[i].join()</span><br><span class="line">        print(<span class="string">&quot;epoch %d finished in %s&quot;</span>%(epoch, ctime()))</span><br><span class="line">        epoch += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    print(<span class="string">&#x27;program end:%s&#x27;</span> %ctime())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文中实现的是在获取到所有大数据量的图片urls信息之后，如果抓取图片到本地的方式。因为单机单线程的方式效率非常低，因此考虑到这种情况便编写了一个多进程多线程的爬虫方式，可以很快速的以超n倍单线程的速度进行图片爬取。（后来发现Scrapy框架也能够以超高的速度进行下载）。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>fetch google arts and culture big images from urls</title>
    <link href="http://yoursite.com/2018/10/23/2018-10-23-fetch-google-arts-and-culture-big-images-from-urls/"/>
    <id>http://yoursite.com/2018/10/23/2018-10-23-fetch-google-arts-and-culture-big-images-from-urls/</id>
    <published>2018-10-22T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.358Z</updated>
    
    <content type="html"><![CDATA[<p>从goole arts and culture big images 抓取大图片，超高清图片，因为google arts and culture对一张具有很高艺术价值的图片的显示方式做过前端的分割处理，因此很难爬取到原图的url，这是一个将浏览器的页面设置到非常大然后截图的形式，同样具有非常高的清晰度。唯一的特征是截取之后的图片会占用大量的内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This program is applied to take 4k images from google art and culture website</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageChops</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> windll</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exImg_value = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_picture</span>(<span class="params">counter</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(<span class="string">&#x27;temp/scrapping/image&#x27;</span> + <span class="built_in">str</span>(counter) + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">    rgb_im = im.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    r, g, b = rgb_im.getpixel((<span class="number">2000</span>, <span class="number">1300</span>))</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">255</span> <span class="keyword">and</span> g == <span class="number">255</span> <span class="keyword">and</span> b == <span class="number">255</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_same</span>(<span class="params">counter</span>):</span></span><br><span class="line">    <span class="keyword">if</span> counter &gt; <span class="number">0</span>:</span><br><span class="line">        prev_counter = counter - <span class="number">1</span></span><br><span class="line">        new_file = os.path.getsize(<span class="string">&#x27;temp/scrapping/image%s.png&#x27;</span> % <span class="built_in">str</span>(counter))</span><br><span class="line">        old_file = os.path.getsize(<span class="string">&#x27;temp/scrapping/image%s.png&#x27;</span> % <span class="built_in">str</span>(prev_counter))</span><br><span class="line">        os.remove(<span class="string">&#x27;temp/scrapping/image%s.png&#x27;</span> % <span class="built_in">str</span>(prev_counter))</span><br><span class="line">        <span class="keyword">if</span> new_file == old_file:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim</span>(<span class="params">image</span>):</span></span><br><span class="line">    bg = Image.new(image.mode, image.size, image.getpixel((<span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line">    diff = ImageChops.difference(image, bg)</span><br><span class="line">    diff = ImageChops.add(diff, diff, <span class="number">2.0</span>, <span class="number">-100</span>)</span><br><span class="line">    bbox = diff.getbbox()</span><br><span class="line">    <span class="keyword">if</span> bbox:</span><br><span class="line">        <span class="keyword">return</span> image.crop(bbox)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">value, delete_chars</span>):</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> delete_chars:</span><br><span class="line">        value = value.replace(c, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_save</span>(<span class="params">name, status</span>):</span></span><br><span class="line">    path = status</span><br><span class="line">    f = filedialog.asksaveasfile(mode=<span class="string">&#x27;wb&#x27;</span>, defaultextension=<span class="string">&quot;.png&quot;</span>, title=<span class="string">&quot;Saving picture&quot;</span>, initialfile=name, filetypes=((<span class="string">&quot;PNG high resolution image&quot;</span>, <span class="string">&quot;*.png&quot;</span>), (<span class="string">&quot;all files&quot;</span>, <span class="string">&quot;*.*&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> f <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> os.path.abspath(path) != f.name.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>):</span><br><span class="line">        im = Image.<span class="built_in">open</span>(path)</span><br><span class="line">        im.save(f)</span><br><span class="line">        os.remove(path)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_folders</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;temp&#x27;</span>):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;temp&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shutil.rmtree(<span class="string">&#x27;temp&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;temp/scrapping&#x27;</span>):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;temp/scrapping&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_scrapping</span>(<span class="params">url</span>):</span></span><br><span class="line">    old_url = url</span><br><span class="line">    url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> old_url:</span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        url += char</span><br><span class="line"></span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">    driver = webdriver.Chrome(executable_path=<span class="string">r&quot;chromedriver.exe&quot;</span>, chrome_options=options)</span><br><span class="line">    driver.set_window_size(<span class="number">4000</span>, <span class="number">4000</span>)</span><br><span class="line">    driver.get(url)</span><br><span class="line">    xPath3 = <span class="string">r&quot;.//html/body/div[3]/div[3]/div/div/div/div[3]/div&quot;</span>  <span class="comment"># img xPath</span></span><br><span class="line">    xPath2 = <span class="string">r&quot;.//html/body/div[3]/div[3]/div/div/div[2]/div[1]/div[2]/div[1]/div&quot;</span>  <span class="comment"># zoom xPath</span></span><br><span class="line">    xPath1 = <span class="string">r&quot;.//html/body/div[3]/div[3]/div/div/div[3]/div/content/span&quot;</span>  <span class="comment"># open img xPath</span></span><br><span class="line">    image_appeared = <span class="literal">False</span>  <span class="comment"># flag for starting click on image</span></span><br><span class="line">    image_zoom_taked = <span class="literal">False</span></span><br><span class="line">    last_file = <span class="string">&#x27;&#x27;</span>  <span class="comment"># last succeed file</span></span><br><span class="line">    driver.implicitly_wait(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        authorPic = driver.find_element_by_xpath(<span class="string">r&#x27;/html[1]/body[1]/div[3]/div[3]/div[1]/div[1]/div[6]/section[2]/div[1]/ul[1]/li[2]/a[1]&#x27;</span>).text  <span class="comment"># author of the picture xPath</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        authorPic = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name_pic = driver.find_element_by_xpath(<span class="string">r&#x27;/html[1]/body[1]/div[3]/div[3]/div[1]/div[1]/div[6]/section[2]/div[1]/ul[1]/li[1]&#x27;</span>).text[<span class="number">7</span>::]  <span class="comment"># name of the picture xPath</span></span><br><span class="line">        <span class="keyword">if</span> authorPic != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            name_pic = <span class="string">&#x27; - &#x27;</span> + name_pic</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        name_pic = driver.title[<span class="number">0</span>:<span class="number">-23</span>]</span><br><span class="line"></span><br><span class="line">    name_file = authorPic + name_pic</span><br><span class="line">    name_file = remove(name_file, <span class="string">&#x27;\/:*?&quot;&lt;&gt;|&#x27;</span>)</span><br><span class="line">    t.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">45</span>):  <span class="comment"># 45 attempts</span></span><br><span class="line">        t.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> image_appeared:</span><br><span class="line">            t.sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">if</span> exImg_value == <span class="number">1</span>:</span><br><span class="line">                elem2 = driver.find_element_by_xpath(xPath1)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                elem2 = driver.find_element_by_xpath(xPath2)</span><br><span class="line">            elem3 = driver.find_element_by_xpath(xPath3)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, elem2)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, elem3)</span><br><span class="line">            t.sleep(<span class="number">3</span>)</span><br><span class="line">            image_appeared = <span class="literal">False</span></span><br><span class="line">            image_zoom_taked = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        driver.save_screenshot(<span class="string">&#x27;temp/scrapping/image%s.png&#x27;</span> % <span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_picture(i) <span class="keyword">and</span> <span class="keyword">not</span> image_zoom_taked:</span><br><span class="line">            image_appeared = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> is_same(i):</span><br><span class="line">            last_file = <span class="string">&#x27;temp/scrapping/image%s.png&#x27;</span> % <span class="built_in">str</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    driver.quit()</span><br><span class="line">    <span class="keyword">return</span> last_file, name_file</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_finally_changes</span>(<span class="params">last_file, name_file</span>):</span></span><br><span class="line">    <span class="keyword">if</span> last_file != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        shutil.copyfile(last_file, <span class="string">&#x27;temp/image_result.png&#x27;</span>)</span><br><span class="line">        shutil.rmtree(<span class="string">&#x27;temp/scrapping&#x27;</span>)</span><br><span class="line">        imOp = Image.<span class="built_in">open</span>(<span class="string">&#x27;temp/image_result.png&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> exImg_value == <span class="number">1</span>:</span><br><span class="line">            im = imOp.crop((<span class="number">0</span>, <span class="number">50</span>, <span class="number">4000</span>, <span class="number">4000</span>))  <span class="comment"># 20!8</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            im = imOp</span><br><span class="line">        im = trim(im)</span><br><span class="line">        im.save(<span class="string">&quot;Ukiyo/&quot;</span> + name_file + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">        shutil.rmtree(<span class="string">&#x27;temp&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> name_file</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;An error occurred with processing image&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_process</span>(<span class="params">index, url</span>):</span></span><br><span class="line">    print(<span class="string">&quot;initialize_folders()&quot;</span>)</span><br><span class="line">    initialize_folders()</span><br><span class="line">    print(<span class="string">&quot;do_scrapping(&#123;0&#125;)&quot;</span>.<span class="built_in">format</span>(url))</span><br><span class="line">    file, name = do_scrapping(url)</span><br><span class="line">    print(<span class="string">&quot;saving image &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(url.split(<span class="string">&quot;/&quot;</span>)[<span class="number">-1</span>])+ <span class="string">&#x27;.png&#x27;</span>))</span><br><span class="line">    status = do_finally_changes(file, <span class="built_in">str</span>(url.split(<span class="string">&quot;/&quot;</span>)[<span class="number">-1</span>]))</span><br><span class="line"><span class="comment">#     file_save(status + &#x27;.png&#x27;, status + &#x27;.png&#x27;)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>,<span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> log_file:</span><br><span class="line">        log_file.write(<span class="built_in">str</span>(index)+<span class="string">&quot; : &quot;</span>+url+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;asserts.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> read_file:</span><br><span class="line">        <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(read_file.readlines()):</span><br><span class="line">            url = <span class="string">&quot;https://artsandculture.google.com&quot;</span> + line.strip()</span><br><span class="line">            print(index, url)</span><br><span class="line">            start_process(index, url)  </span><br><span class="line">path = <span class="string">&quot;Ukiyo&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">    os.makedirs(path)</span><br><span class="line">start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_process(0，&quot;https://artsandculture.google.com/asset/sanjūrokkasen/RQEYzE71xKwOlQ&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      从goole arts and culture big images 抓取大图片，超高清图片，因为google arts and culture对一张具有很高艺术价值的图片的显示方式做过前端的分割处理，因此很难爬取到原图的url，这是一个将浏览器的页面设置到非常大然后截图的形式，同样具有非常高的清晰度。唯一的特征是截取之后的图片会占用大量的内存。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>fetch huaban big image urls</title>
    <link href="http://yoursite.com/2018/10/23/2018-10-23-fetch-huaban-big-image-urls/"/>
    <id>http://yoursite.com/2018/10/23/2018-10-23-fetch-huaban-big-image-urls/</id>
    <published>2018-10-22T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.359Z</updated>
    
    <content type="html"><![CDATA[<p>本文中实现的是采用selenium框架爬取huaban网站的图片的urls，方便下一步的下载操作。Selenium是一个动态爬取框架，采用模拟浏览器行为，通过模拟人工控制浏览器行为的一个框架，具体需要网站的数据分布呈现一定的规律性才比较方便。Selenium能够处理静态爬虫爬不到的内容，比如js动态加载之后才能显示的图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># os.environ[&quot;PATH&quot;] += os.pathsep + &#x27;D:\google-art-downloader-master&#x27;</span></span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--disable-gpu&quot;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line"></span><br><span class="line">images_all = <span class="built_in">set</span>()</span><br><span class="line">browser = webdriver.Chrome(chrome_options = chrome_options)</span><br><span class="line"><span class="comment"># browser = webdriver.PhantomJS()</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;huaban_pin_asserts_all.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> read_file:</span><br><span class="line">        <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(read_file.readlines()):</span><br><span class="line">            url = <span class="string">&quot;http://huaban.com&quot;</span> + line.strip()</span><br><span class="line">            browser.get(url,)</span><br><span class="line">            browser.set_page_load_timeout(<span class="number">10000</span>)</span><br><span class="line">            browser.set_script_timeout(<span class="number">10000</span>)<span class="comment">#这两种设置都进行才有效</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(index, url)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                img1 = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;baidu_image_holder&quot;]/a/img&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> img1 != <span class="literal">None</span>:</span><br><span class="line">                    images_all.add(img1.get_attribute(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                img2 = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;baidu_image_holder&quot;]/img&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> img2 != <span class="literal">None</span>:</span><br><span class="line">                    images_all.add(img2.get_attribute(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;huaban_images_all.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> write_file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> images_all:</span><br><span class="line">            write_file.write(<span class="built_in">str</span>(line) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文中实现的是采用selenium框架爬取huaban网站的图片的urls，方便下一步的下载操作。Selenium是一个动态爬取框架，采用模拟浏览器行为，通过模拟人工控制浏览器行为的一个框架，具体需要网站的数据分布呈现一定的规律性才比较方便。Selenium能够处理静态爬虫爬不到的内容，比如js动态加载之后才能显示的图片。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python的内存调试</title>
    <link href="http://yoursite.com/2018/10/18/2018-10-18-memory-exceed-of-python/"/>
    <id>http://yoursite.com/2018/10/18/2018-10-18-memory-exceed-of-python/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python内存增加，内存泄漏调试"><a href="#python内存增加，内存泄漏调试" class="headerlink" title="python内存增加，内存泄漏调试"></a>python内存增加，内存泄漏调试</h2><h3 id="gc，objgraph"><a href="#gc，objgraph" class="headerlink" title="gc，objgraph"></a>gc，objgraph</h3><p>在调试深度学习（deep Learning）的算法运行过程中发现，在测试阶段，随着图片数据的增加，迭代的过程中造成内存不断的增长，最终导致内存爆满，泄露，和程序奔溃的问题，因此通过调试来发现问题，用到了objgraph, gc等插件来发现问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 强制进行垃圾回收  </span></span><br><span class="line">      gc.collect()  </span><br><span class="line">      <span class="comment"># ### 打印出对象数目最多的 50 个类型信息  </span></span><br><span class="line">      <span class="comment"># objgraph.show_most_common_types(limit=20) </span></span><br><span class="line">      objgraph.show_growth()</span><br><span class="line">      <span class="comment"># objgraph.show_backrefs(objgraph.by_type(&#x27;function&#x27;)[0], max_depth = 10, filename = &#x27;obj.dot&#x27;)</span></span><br><span class="line">      <span class="comment"># objgraph.show_chain(</span></span><br><span class="line">      <span class="comment"># objgraph.find_backref_chain(</span></span><br><span class="line">      <span class="comment">#     objgraph.by_type(&#x27;_InputList&#x27;)[0],</span></span><br><span class="line">      <span class="comment">#     objgraph.is_proper_module</span></span><br><span class="line">      <span class="comment"># ),</span></span><br><span class="line">      <span class="comment"># filename=&#x27;obj_chain.dot&#x27;)</span></span><br><span class="line">      <span class="comment"># objgraph.show_backrefs(objgraph.by_type(&#x27;Tensor&#x27;)[0], extra_ignore=(id(gc.garbage),),  max_depth = 10, filename = &#x27;del_obj.dot&#x27;)</span></span><br></pre></td></tr></table></figure><p>以此方法生成dot文件之后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pydotplus</span><br><span class="line"><span class="keyword">import</span> pydot</span><br><span class="line">os.environ[<span class="string">&quot;PATH&quot;</span>] += os.pathsep + <span class="string">&#x27;D:/graphviz/bin&#x27;</span></span><br><span class="line">file_path = <span class="string">&quot;D:/microsoft/ImageCreation/del_obj.dot&quot;</span></span><br><span class="line">output_path = <span class="string">&quot;D:/microsoft/ImageCreation/del_obj.pdf&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    graph = pydot.graph_from_dot_data(f.read())</span><br><span class="line">    graph[<span class="number">0</span>].write_pdf(output_path)</span><br></pre></td></tr></table></figure><p>用pydot将dot转换成pdf可视化观看</p><p>另外一种方式，木有尝试过，可能比较简单，直接保存为graph.png格式，省略转换步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> objgraph</span><br><span class="line">objgraph.show_growth()  <span class="comment"># show the growth of the objects</span></span><br><span class="line">objgraph.show_refs(variableName, filename=<span class="string">&#x27;graph.png&#x27;</span>)  <span class="comment"># show the reference structure of the variable</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在调试深度学习（deep Learning）的算法运行过程中发现，在测试阶段，随着图片数据的增加，迭代的过程中造成内存不断的增长，最终导致内存爆满，泄露，和程序奔溃的问题，因此通过调试来发现问题，用到了objgraph, gc等插件来发现问题。
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python实现svm和使用f-score</title>
    <link href="http://yoursite.com/2018/10/12/2018-10-12-python-svm/"/>
    <id>http://yoursite.com/2018/10/12/2018-10-12-python-svm/</id>
    <published>2018-10-11T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><em>使用python语言实现对于支持向量机（SVM）特征选择的实现，特征选择算法为f-score,该程序的主要有点是可输入文件囊括了csv,libsvm,arff等在序列分类的机器学习领域常用到的格式，其中csv:最后一列为class,libsvm:第一列为class,arff:通常最后一列为类别，其中csv和libsvm中不存在开头，直接是使用的数据。</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py -i 1.csv,2.csv,3.libsvm,4.arff -c 5</span><br></pre></td></tr></table></figure><ul><li>其中train.py为程序名称</li><li>-i :后面接文件名，可以为csv,libsvm,arff格式，多个文件也可以用，但建议不要，因为特征选择时间通常很长</li><li>-c:后面5代表五折交叉验证</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> clock</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span>  f_classif</span><br><span class="line"><span class="keyword">from</span> sklearn.externals.joblib <span class="keyword">import</span> Memory</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span>  metrics</span><br><span class="line"><span class="keyword">import</span> easy_excel</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold  </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> easy_excel</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble</span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB  </span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> sklearn.utils <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC, LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> BernoulliNB</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_svmlight_file</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier, LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier, AdaBoostClassifier, \</span><br><span class="line">    BaggingClassifier, ExtraTreesClassifier, GradientBoostingClassifier</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span>(<span class="params">labelArr, predictArr</span>):</span></span><br><span class="line">    <span class="comment">#labelArr[i] is actual value,predictArr[i] is predict value</span></span><br><span class="line">    TP = <span class="number">0.</span>; TN = <span class="number">0.</span>; FP = <span class="number">0.</span>; FN = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(labelArr)):</span><br><span class="line">        <span class="keyword">if</span> labelArr[i] == <span class="number">1</span> <span class="keyword">and</span> predictArr[i] == <span class="number">1</span>:</span><br><span class="line">            TP += <span class="number">1.</span></span><br><span class="line">        <span class="keyword">if</span> labelArr[i] == <span class="number">1</span> <span class="keyword">and</span> predictArr[i] == <span class="number">0</span>:</span><br><span class="line">            FN += <span class="number">1.</span></span><br><span class="line">        <span class="keyword">if</span> labelArr[i] == <span class="number">0</span> <span class="keyword">and</span> predictArr[i] == <span class="number">1</span>:</span><br><span class="line">            FP += <span class="number">1.</span></span><br><span class="line">        <span class="keyword">if</span> labelArr[i] == <span class="number">0</span> <span class="keyword">and</span> predictArr[i] == <span class="number">0</span>:</span><br><span class="line">            TN += <span class="number">1.</span></span><br><span class="line">    <span class="keyword">if</span> (TP + FN)==<span class="number">0</span>:</span><br><span class="line">        SN=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        SN = TP/(TP + FN) <span class="comment">#Sensitivity = TP/P  and P = TP + FN</span></span><br><span class="line">    <span class="keyword">if</span> (FP+TN)==<span class="number">0</span>:</span><br><span class="line">        SP=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        SP = TN/(FP + TN) <span class="comment">#Specificity = TN/N  and N = TN + FP</span></span><br><span class="line">    <span class="keyword">if</span> (TP+FP)==<span class="number">0</span>:</span><br><span class="line">        precision=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        precision=TP/(TP+FP)</span><br><span class="line">    <span class="keyword">if</span> (TP+FN)==<span class="number">0</span>:</span><br><span class="line">        recall=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        recall=TP/(TP+FN)</span><br><span class="line">    GM=math.sqrt(recall*SP)</span><br><span class="line">    <span class="comment">#MCC = (TP*TN-FP*FN)/math.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))</span></span><br><span class="line">    <span class="keyword">return</span> precision,recall,SN,SP,GM,TP,TN,FP,FN</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mem = Memory(<span class="string">&quot;./mycache&quot;</span>)</span><br><span class="line"><span class="meta">@mem.cache</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    data = load_svmlight_file(file_name)</span><br><span class="line">    <span class="keyword">return</span> data[<span class="number">0</span>], data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_and_arff2svm</span>(<span class="params">arff_files</span>):</span></span><br><span class="line">    svm_files = []</span><br><span class="line">    <span class="keyword">for</span> arff_file <span class="keyword">in</span> arff_files:</span><br><span class="line">        name = arff_file[<span class="number">0</span>: arff_file.rindex(<span class="string">&#x27;.&#x27;</span>)]</span><br><span class="line">        tpe = arff_file[arff_file.rindex(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>:]</span><br><span class="line">        svm_file = name+<span class="string">&quot;.libsvm&quot;</span></span><br><span class="line">        svm_files.append(svm_file)</span><br><span class="line">        <span class="keyword">if</span> tpe == <span class="string">&quot;arff&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(svm_file):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f = <span class="built_in">open</span>(arff_file)</span><br><span class="line">                w = <span class="built_in">open</span>(svm_file, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> line.strip() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        temp = line.strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\r&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                        w.write(temp[<span class="built_in">len</span>(temp)<span class="number">-1</span>])</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)<span class="number">-1</span>):</span><br><span class="line">                            w.write(<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(temp[i]))</span><br><span class="line">                        w.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        line = line.upper()</span><br><span class="line">                        <span class="keyword">if</span> line.startswith(<span class="string">&#x27;@DATA&#x27;</span>) <span class="keyword">or</span> flag:</span><br><span class="line">                            flag = <span class="literal">True</span></span><br><span class="line">                f.close()</span><br><span class="line">                w.close()</span><br><span class="line">        <span class="keyword">elif</span> tpe == <span class="string">&quot;csv&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(svm_file):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f = <span class="built_in">open</span>(arff_file)</span><br><span class="line">                w = <span class="built_in">open</span>(svm_file, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    <span class="keyword">if</span> line.strip() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    temp = line.strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\r&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                    w.write(temp[<span class="built_in">len</span>(temp)<span class="number">-1</span>])</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)<span class="number">-1</span>):</span><br><span class="line">                        w.write(<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(temp[i]))</span><br><span class="line">                    w.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.close()</span><br><span class="line">                w.close()</span><br><span class="line">        <span class="keyword">elif</span> tpe == <span class="string">&quot;libsvm&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;File format error! Arff and libsvm are passed.&quot;</span></span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="keyword">return</span> svm_files</span><br><span class="line">opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">&quot;hi:c:t:o:s:m:&quot;</span>, )</span><br><span class="line"><span class="keyword">for</span> op, value <span class="keyword">in</span> opts:</span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&quot;-i&quot;</span>:</span><br><span class="line">        input_files = <span class="built_in">str</span>(value)</span><br><span class="line">        input_files = input_files.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> input_file <span class="keyword">in</span> input_files:</span><br><span class="line">            <span class="keyword">if</span> input_file == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Warning: please insure no blank in your input files !&quot;</span></span><br><span class="line">                sys.exit()</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&quot;-c&quot;</span>:</span><br><span class="line">        cv = <span class="built_in">int</span>(value)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    path=<span class="string">&quot;&quot;</span></span><br><span class="line">    outputname=<span class="string">&quot;svm_f-score&quot;</span></span><br><span class="line">    name=outputname</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;*** Validating file format ...&#x27;</span></span><br><span class="line">    input_files = csv_and_arff2svm(input_files)</span><br><span class="line">    <span class="keyword">for</span> input_file <span class="keyword">in</span> input_files:</span><br><span class="line">        <span class="comment"># 导入原始数据</span></span><br><span class="line">        X, Y = get_data(input_file)</span><br><span class="line">        train_data = X.todense()</span><br><span class="line">        train_data=np.array(train_data)</span><br><span class="line">        F, pval = f_classif(train_data, Y)</span><br><span class="line">        idx = np.argsort(F)</span><br><span class="line">        selected_list_=idx[::<span class="number">-1</span>]</span><br><span class="line">        F_sort_value=[F[e] <span class="keyword">for</span> e <span class="keyword">in</span> selected_list_]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;all_dimension_results.txt&quot;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="built_in">str</span>(F_sort_value)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> F_sort_value</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;all_dimension_results.txt&quot;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="built_in">str</span>(selected_list_)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> selected_list_</span><br><span class="line">        bestACC=<span class="number">0</span></span><br><span class="line">        bestC=<span class="number">0</span></span><br><span class="line">        bestgamma=<span class="number">0</span></span><br><span class="line">        best_dimension=<span class="number">0</span></span><br><span class="line">        all_dimension_results=[]</span><br><span class="line">        <span class="keyword">for</span> select_num <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="built_in">len</span>(train_data[<span class="number">0</span>])+<span class="number">1</span>):</span><br><span class="line">            train_data2=train_data</span><br><span class="line">            <span class="built_in">print</span> np.array(train_data).shape</span><br><span class="line">            <span class="built_in">print</span> np.array(train_data2).shape</span><br><span class="line">            selected_list_2=selected_list_[xrange(select_num)]</span><br><span class="line">            X_train=pd.DataFrame(train_data2)</span><br><span class="line">            X_train=X_train.iloc[:,selected_list_2]</span><br><span class="line">            X = np.array(X_train)</span><br><span class="line">            svc = svm.SVC()</span><br><span class="line">            parameters = &#123;<span class="string">&#x27;kernel&#x27;</span>: [<span class="string">&#x27;rbf&#x27;</span>], <span class="string">&#x27;C&#x27;</span>:<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="number">2</span>**x,np.linspace(<span class="number">-2</span>,<span class="number">5</span>,<span class="number">7</span>)), <span class="string">&#x27;gamma&#x27;</span>:<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="number">2</span>**x,np.linspace(<span class="number">-5</span>,<span class="number">2</span>,<span class="number">7</span>))&#125;</span><br><span class="line">            clf = GridSearchCV(svc, parameters, cv=cv, n_jobs=<span class="number">2</span>, scoring=<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">            clf.fit(X, Y)</span><br><span class="line">            C=clf.best_params_[<span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">            joblib.dump(clf,path+outputname+<span class="built_in">str</span>(select_num)+<span class="string">&quot;.model&quot;</span>)</span><br><span class="line">            gamma=clf.best_params_[<span class="string">&#x27;gamma&#x27;</span>]</span><br><span class="line">            y_predict=cross_val_predict(svm.SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,C=C,gamma=gamma),X,Y,cv=cv,n_jobs=<span class="number">2</span>)</span><br><span class="line">            y_predict_prob=cross_val_predict(svm.SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,C=C,gamma=gamma,probability=<span class="literal">True</span>),X,Y,cv=cv,n_jobs=<span class="number">2</span>,method=<span class="string">&#x27;predict_proba&#x27;</span>)</span><br><span class="line">            predict_save=[Y.astype(<span class="built_in">int</span>),y_predict.astype(<span class="built_in">int</span>),y_predict_prob[:,<span class="number">1</span>]]</span><br><span class="line">            predict_save=np.array(predict_save).T</span><br><span class="line">            pd.DataFrame(predict_save).to_csv(path+outputname+<span class="string">&quot;_&quot;</span>+<span class="string">&#x27;_predict_crossvalidation.csv&#x27;</span>,header=<span class="literal">None</span>,index=<span class="literal">False</span>)</span><br><span class="line">            ROC_AUC_area=metrics.roc_auc_score(Y,y_predict)</span><br><span class="line">            ACC=metrics.accuracy_score(Y,y_predict)</span><br><span class="line">            precision, recall, SN, SP, GM, TP, TN, FP, FN = performance(Y, y_predict)</span><br><span class="line">            F1_Score=metrics.f1_score(Y, y_predict)</span><br><span class="line">            F_measure=F1_Score</span><br><span class="line">            MCC=metrics.matthews_corrcoef(Y, y_predict)</span><br><span class="line">            pos=TP+FN</span><br><span class="line">            neg=FP+TN</span><br><span class="line">            savedata=[[[<span class="string">&#x27;svm&#x27;</span>+<span class="string">&quot;C:&quot;</span>+<span class="built_in">str</span>(C)+<span class="string">&quot;gamma:&quot;</span>+<span class="built_in">str</span>(gamma),ACC,precision, recall,SN, SP, GM,F_measure,F1_Score,MCC,ROC_AUC_area,TP,FN,FP,TN,pos,neg]]]</span><br><span class="line">            <span class="keyword">if</span> ACC&gt;bestACC:</span><br><span class="line">                bestACC=ACC</span><br><span class="line">                bestgamma=gamma</span><br><span class="line">                bestC=C</span><br><span class="line">                best_dimension=X.shape[<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span> savedata</span><br><span class="line">            <span class="built_in">print</span> X.shape[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;all_dimension_results.txt&quot;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="built_in">str</span>(savedata)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            all_dimension_results.append(savedata)</span><br><span class="line">        <span class="built_in">print</span> bestACC</span><br><span class="line">        <span class="built_in">print</span> bestC</span><br><span class="line">        <span class="built_in">print</span> bestgamma</span><br><span class="line">        <span class="built_in">print</span> best_dimension</span><br><span class="line">        easy_excel.save(<span class="string">&quot;svm_crossvalidation&quot;</span>,[<span class="built_in">str</span>(X.shape[<span class="number">1</span>])],savedata,path+<span class="string">&#x27;cross_validation_&#x27;</span>+name+<span class="string">&#x27;.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用python语言实现对于支持向量机（SVM）特征选择的实现，特征选择算法为f-score,该程序的主要有点是可输入文件囊括了csv,libsvm,arff等在序列分类的机器学习领域常用到的格式，其中csv:最后一列为class,libsvm:第一列为class,arff:通常最后一列为类别，其中csv和libsvm中不存在开头，直接是使用的数据。
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>分田地-网易-python</title>
    <link href="http://yoursite.com/2018/08/27/2018-08-27-plite-python/"/>
    <id>http://yoursite.com/2018/08/27/2018-08-27-plite-python/</id>
    <published>2018-08-26T16:00:00.000Z</published>
    <updated>2020-11-05T07:29:47.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>牛牛和 15 个朋友来玩打土豪分田地的游戏，牛牛决定让你来分田地，地主的田地可以看成是一个矩形，每个位置有一个价值。分割田地的方法是横竖各切三刀，分成 16 份，作为领导干部，牛牛总是会选择其中总价值最小的一份田地， 作为牛牛最好的朋友，你希望牛牛取得的田地的价值和尽可能大，你知道这个值最大可以是多少吗？</p><hr><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>每个输入包含 1 个测试用例。每个测试用例的第一行包含两个整数 n 和 m（1 &lt;= n, m &lt;= 75），表示田地的大小，接下来的 n 行，每行包含 m 个 0-9 之间的数字，表示每块位置的价值。</p><hr><h2 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h2><p>输出一行表示牛牛所能取得的最大的价值。</p><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">3332</span><br><span class="line">3233</span><br><span class="line">3332</span><br><span class="line">2323</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="代码-不能AC，受限于python，最高20"><a href="#代码-不能AC，受限于python，最高20" class="headerlink" title="代码 (不能AC，受限于python，最高20%)"></a>代码 (不能AC，受限于python，最高20%)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">(x,y)=[<span class="built_in">int</span>(e) <span class="keyword">for</span> e <span class="keyword">in</span> raw_input(<span class="string">&quot;&quot;</span>).split()]</span><br><span class="line">data=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    data.append([<span class="built_in">int</span>(e) <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">list</span>(raw_input(<span class="string">&quot;&quot;</span>))])</span><br><span class="line"></span><br><span class="line">sum_value=[[<span class="number">0</span> <span class="keyword">for</span> x_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>)] <span class="keyword">for</span> y_j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>)]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> j == <span class="number">0</span>:</span><br><span class="line">            sum_value[i][j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sum_value[i][j] = sum_value[i<span class="number">-1</span>][j] + sum_value[i][j<span class="number">-1</span>] -sum_value[i<span class="number">-1</span>][j<span class="number">-1</span>] +data[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">            </span><br><span class="line">                 </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">x1,y1,x2,y2</span>):</span></span><br><span class="line">        <span class="keyword">return</span> sum_value[x2][y2]-sum_value[x1][y2]-sum_value[x2][y1]+sum_value[x1][y1]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fentiandi</span>(<span class="params">x_length,y_length,avg_value</span>):</span></span><br><span class="line">    <span class="keyword">for</span> index_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,y_length<span class="number">-2</span>):</span><br><span class="line">        <span class="keyword">for</span> index_j <span class="keyword">in</span> <span class="built_in">range</span>(index_i+<span class="number">1</span>,y_length<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> index_k <span class="keyword">in</span> <span class="built_in">range</span>(index_j+<span class="number">1</span>,y_length):</span><br><span class="line">                count_value = <span class="number">0</span></span><br><span class="line">                pre_line_index=<span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> x_index_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,x_length+<span class="number">1</span>):</span><br><span class="line">                    </span><br><span class="line">                    line1 = get_data(pre_line_index,<span class="number">0</span>,x_index_i,index_i)</span><br><span class="line">                    </span><br><span class="line">                    line2 = get_data(pre_line_index,index_i,x_index_i,index_j)</span><br><span class="line">                    </span><br><span class="line">                    line3 = get_data(pre_line_index,index_j,x_index_i,index_k)</span><br><span class="line">                    </span><br><span class="line">                    line4 = get_data(pre_line_index,index_k,x_index_i,y_length)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> line1 &gt;= avg_value <span class="keyword">and</span> line2 &gt;= avg_value <span class="keyword">and</span> line3 &gt;= avg_value <span class="keyword">and</span> line4 &gt;= avg_value:</span><br><span class="line">                        pre_line_index = x_index_i</span><br><span class="line">                        count_value += <span class="number">1</span></span><br><span class="line">                        </span><br><span class="line">                    <span class="keyword">if</span> count_value &gt;= <span class="number">4</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_min_value</span>():</span></span><br><span class="line">    high=sum_value[x<span class="number">-1</span>][y<span class="number">-1</span>]</span><br><span class="line">    best_value=<span class="number">0</span></span><br><span class="line">    low=<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        middle=(low+high)/<span class="number">2</span></span><br><span class="line"><span class="comment">#         print &quot;low,middle,high&quot;,low,middle,high</span></span><br><span class="line">        <span class="keyword">if</span> fentiandi(x,y,middle) == <span class="literal">True</span>:</span><br><span class="line">            low=middle+<span class="number">1</span></span><br><span class="line">            best_value=middle</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = middle<span class="number">-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> best_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_min_value()</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      牛牛和 15 个朋友来玩打土豪分田地的游戏，牛牛决定让你来分田地，地主的田地可以看成是一个矩形，每个位置有一个价值。分割田地的方法是横竖各切三刀，分成 16 份，作为领导干部，牛牛总是会选择其中总价值最小的一份田地， 作为牛牛最好的朋友，你希望牛牛取得的田地的价值和尽可能大，你知道这个值最大可以是多少吗？
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
